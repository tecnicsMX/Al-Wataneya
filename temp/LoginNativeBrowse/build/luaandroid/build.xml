<?xml version="1.0" encoding="UTF-8"?>
<project name="konywidgets" basedir="."  default="all">

	<target name="init">
		<taskdef resource="com/kony/ant/antkonyscript.properties">
		  <classpath>
				<pathelement location="${plugin.loc}/lib/KonyAntScript.jar"/>
		  </classpath>
		</taskdef>
		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
	      <classpath>
	        <pathelement location="${plugin.loc}/lib/ant-contrib-0.6.jar"/>
	      </classpath>
	    </taskdef>
		<property name="extres" value="${android.plugin.loc}/luaandroid/extres"/>
		<property name="extlibs" value="${android.plugin.loc}/luaandroid/extlibs"/>
		<property name="DoubleQuotes" value="&quot;"/>
		<property name="appIdHeadlessLauncherActivity" value="${appid}HeadlessLauncherActivity"/>
		<taskdef name="escapejssource" classname="com.konylabs.android.anttask.EscapeJavaScriptSourceTask">
			<classpath>
				<pathelement location="${extres}/EscapeJavaScriptSourceTask.jar"/>
				<pathelement location="${extres}/commons-lang-2.6.jar"/>
			</classpath>
		</taskdef>
		<if>
			<equals arg1="${isFPbuild}" arg2="$${isFPbuild}"/>
			<then>
				<property name="isFPbuild" value="false"/>
			</then>
		</if>
		<if>
			<equals arg1="${isFPbuild}" arg2="true"/>
			<then>
				<property name="currentfile" value="fpapp.xml"/>
				<property name="enablesearchbar.local" value="true"/>
				<property name="build.option.local" value="debug"/>
				<property name="isIncrementalBuild.local" value="false"/>
				<property name="enableJSBindings" value="true"/>
			</then>
			<else>
				<property name="currentfile" value="build.xml"/>
				<property name="enablesearchbar.local" value="${enablesearchbar}"/>
				<property name="build.option.local" value="${build.option}"/>
				<property name="isIncrementalBuild.local" value="${isIncrementalBuild}"/>
			</else>
		</if>
	    <if>
        	<available file="${project.loc}/androidbuild.properties" />
        	<then>
		<loadproperties srcFile="${project.loc}/androidbuild.properties"/>
		</then>
	</if>
	<if>
        	<available file="${project.loc}/../androidBuildRequiredPaths.properties" />
        	<then>
		<loadproperties srcFile="${project.loc}/../androidBuildRequiredPaths.properties"/>
		</then>
	</if>
		 <loadproperties srcFile="${extres}/buildparams.properties"/>
		<property name="tab" value="&#x0009;"/>
		<if>
			<equals arg1="${usegoogleplaylocationservices}" arg2="$${usegoogleplaylocationservices}"/>
			<then>
				<property name="usegoogleplaylocationservices.local" value="false"/>
			</then>
			<else>
				<property name="usegoogleplaylocationservices.local" value="${usegoogleplaylocationservices}"/>
			</else>
		</if>
		<if>
			<equals arg1="${useHuaweiMapAndLocationServices}" arg2="$${useHuaweiMapAndLocationServices}"/>
			<then>
				<property name="useHuaweiMapAndLocationServices.local" value="false"/>
			</then>
			<else>
				<property name="useHuaweiMapAndLocationServices.local" value="false"/> <!--${useHuaweiMapAndLocationServices}-->
			</else>
		</if>
		<if>
			<equals arg1="${useHuaweiPushService}" arg2="$${useHuaweiPushService}"/>
			<then>
				<property name="useHuaweiPushService.local" value="false"/>
			</then>
			<else>
				<property name="useHuaweiPushService.local" value="false"/> <!--${useHuaweiPushService}-->
			</else>
		</if>	
		<if>
			<equals arg1="${customHuaweiPushService}" arg2="$${customHuaweiPushService}"/>
			<then>
				<property name="customHuaweiPushService.local" value=""/>
			</then>
			<else>
				<property name="customHuaweiPushService.local" value=""/> <!--${customHuaweiPushService}-->
			</else>
		</if>		
		<echo>isLibraryBuild :: ${isLibraryBuild}</echo>
		<echo>UseSQLCipherFIPS :: ${UseSQLCipherFIPS}</echo>
		<echo>UseOpenSSLLibrary :: ${UseOpenSSLLibrary}</echo>
		<echo  message= "build option :: ${build.option}"/>
		<echo  message= "andtargetsdkkey :: ${andtargetsdkkey}"/>
		<echo  message= "donotAddQueryAllPackages:: ${donotAddQueryAllPackages}"/>
		<if>
		<equals arg1="${support32bit}" arg2="true" />
			<then>
				<property name="support_arm_32bit" value="true"/>
				<if>
				<equals arg1="${supportx86}" arg2="true" />
					<then>
						<property name="support_x86_32bit" value="true"/>
					</then>
					<else>
						<property name="support_x86_32bit" value="false"/>
					</else>
				</if>
				<if>
				<equals arg1="${support64bit}" arg2="true" />
				<then>
					<property name="support_arm_64bit" value="true"/>
					  <if>
					<equals arg1="${supportx86}" arg2="true" />
					  <then>
							<property name="support_x86_64bit" value="true"/>
					  </then>
						<else>
							<property name="support_x86_64bit" value="false"/>
						</else>
					  </if>
				</then>
				<else>
					<property name="support_arm_64bit" value="false"/>
					<property name="support_x86_64bit" value="false"/>
				</else>
				</if>
			</then>
			<else>
				<property name="support_arm_32bit" value="false"/>
				<property name="support_x86_32bit" value="false"/>
				<property name="support_arm_64bit" value="true"/>
				<if>
					<equals arg1="${supportx86}" arg2="true" />
				<then>
					<property name="support_x86_64bit" value="true"/>
				</then>
				<else>
					<property name="support_x86_64bit" value="false"/>
				</else>
				</if>
			</else>
		</if>
		<echo> support_arm_32bit  :: ${support_arm_32bit}</echo>
		<echo> support_arm_64bit  :: ${support_arm_64bit}</echo>
		<echo> support_x86_32bit  :: ${support_x86_32bit}</echo>
		<echo> support_x86_64bit  :: ${support_x86_64bit}</echo>
		<if>
			<and>
				<equals arg1="${support_arm_32bit}" arg2="false"/>
				<equals arg1="${support_arm_64bit}" arg2="false"/>
				<equals arg1="${support_x86_32bit}" arg2="false"/>
				<equals arg1="${support_x86_64bit}" arg2="false"/>
			</and>
		<then>
				<fail message="Please select atleast one ABI/Architecture"/>
		</then>
		</if>
		<property name="outputfolder" value="${appfolder}/output/lua"/>
		<property environment="env"/>
		<property name="dist.dir" value="${basedir}/dist"/>
		<property name="konyapp.dir" location="${resfolder}/../"/>
		<echo>konyapp.dir = ${konyapp.dir}</echo>
		<echo>isIncrementalBuild = ${isIncrementalBuild.local}</echo>
		<condition property="codedir" value="js" else="lua">
			<equals arg1="js" arg2="${dev.language}" casesensitive="false" trim="true"/>
		</condition>
		<condition property="outputdir" value="jsoutput" else="output">
			<equals arg1="js" arg2="${dev.language}" casesensitive="false" trim="true"/>
		</condition>
		<if>
			<equals arg1="${isFPbuild}" arg2="false"/>
			<then>
				<echo>isUniversalApp = ${isUniversalApp}</echo>
				<condition property="isWatchBuild.Local" value = "true" else = "false">
					<and>
						<not>
							<equals arg1="${isWatchBuild}" arg2="$${isWatchBuild}"/>
						</not>
						<equals arg1="${isWatchBuild}" arg2="true"/>
					</and>
			   </condition>
				 <if>
					<equals arg1="${isWatchBuild.Local}" arg2="true"/>
					<then>
					   <property name="jssrc.dir" value="${resfolder}/../jssrc/androidwearos"/>
					</then>
					<else>
					 <property name="jssrc.dir" value="${resfolder}/../jssrc/android"/>
					</else>
				</if>

				<if>
					<equals arg1="${nativecodegen}" arg2="true"/>
					<then>
						<property name="app.dir" value="${dist.dir}/${appid}_native"/>
					</then>
				</if>
				<if>
					<equals arg1="${hybridmode}" arg2="native"/>
					<then>
						<property name="app.dir" value="${dist.dir}/${appid}"/>
					</then>
				<else>
					<if>
						<equals arg1="${hybridmode}" arg2="wrapper"/>
						<then>
							<property name="app.dir" value="${dist.dir}/${appid}_wrapper"/>
							<property name="hybridmode.dir" value="${appfolder}/${outputdir}/spaandroidwrapper"/>
						</then>
					<else>
						<if>
							<equals arg1="${hybridmode}" arg2="mixed"/>
							<then>
								<property name="app.dir" value="${dist.dir}/${appid}_mixed"/>
								<property name="hybridmode.dir" value="${appfolder}/${outputdir}/spaandroidmixed"/>
							</then>
						</if>
					</else>
					</if>
				</else>
				</if>
				<echo>resources.common.folder ... ${resources.common.folder}</echo>
				<echo>resources.platform.folder ... ${resources.platform.folder}</echo>
				<if>
					<or>
						<equals arg1="${resources.new.structure}" arg2="false"/>
						<equals arg1="${resources.new.structure}" arg2="$${resources.new.structure}"/>
					</or>
					<then>
						<property name="resources.common.folder" value="common"/>
						<property name="resources.platform.folder" value="${resource.platform.folder}"/>
						<property name="resources.mobile.web" value="mobilethinclient"/>
					</then>
				</if>
			</then>
			<else>
				<property name="app.dir" value="${basedir}"/>
			</else>
		</if>
		<echo>automation mode ${enableAutomation}</echo>
		<if>
			<and>
				<equals arg1="${build.option.local}" arg2="debug"/>
				<equals arg1="${enableAutomation}" arg2="true"/>
			</and>
			<then>
				<echo>automation mode enabled</echo>
				<property name="automationEnabled" value="true" />
				<property name="automationMode" value="playback" />
			</then>
		</if>
		<property name="assets.dir" value="${app.dir}/assets"/>
		<delete file="${assets.dir}/additional.properties"/>
		<property name="libs.dir" value="${app.dir}/libs"/>
		<property name="src.dir" value="${app.dir}/src"/>
		<!-- Pick 'networktrustconfig' property value from 'allowselfsignedcertificates' iff 'networktrustconfig' is empty and 'allowselfsignedcertificates' is defined. -->
		<if>
			<equals arg1="${networktrustconfig}" arg2="$${networktrustconfig}" />
			<then>
				<if>
					<not>
						<equals arg1="${allowselfsignedcertificates}" arg2="$${allowselfsignedcertificates}" />
					</not>
					<then>
						<property name="networktrustconfig" value="${allowselfsignedcertificates}" />
					</then>
				</if>
			</then>
		</if>
	</target>

    <target name="copyjar">
		<if>
			<equals arg1="${isFPbuild}" arg2="false"/>
			<then>
				<available file="${app.dir}" type="dir"  property="appdir.present"/>
				<echo>isIncrementalBuild = ${isIncrementalBuild.local} and appdir.present = ${appdir.present}</echo>
				<mkdir dir="${dist.dir}"/>
				<mkdir dir="${app.dir}"/>
				<unjar src="codegen.jar" dest="${app.dir}" overwrite="true"/>
			</then>
			<else>
				<echo>Copying libs from codegen plugin...</echo>
				<mkdir dir="${app.dir}/codegentemp"/>
				<unjar src="${android.plugin.loc}/luaandroid/codegen.jar" dest="${app.dir}/codegentemp"/>
				<move file="${app.dir}/res" tofile="${app.dir}/res_fp"/>
				<copydir src="${app.dir}/codegentemp/" dest="${app.dir}" forceoverwrite="true">
					<patternset>
						<exclude name="assets/**"/>
					</patternset>
				</copydir>
				<copydir src="${app.dir}/res_fp" dest="${app.dir}/res" forceoverwrite="true"/>
				<copy file="${app.dir}/codegentemp/res/values/strings.xml" tofile="${app.dir}/res/values/strings.xml" overwrite="true"/>
				<delete dir="${app.dir}/codegentemp"/>
				<delete dir="${app.dir}/res_fp"/>
			</else>
		</if>
    </target>

    <target name="copyextlibs">
	<echo>Copying extlibs ... dev.language = ${dev.language}</echo>
	<echo>networktrustconfig = ${networktrustconfig}</echo>
		<if>
			<equals arg1="${networktrustconfig}" arg2="All"/>
			<then>
				<echo>Copying KonyAllowAllTrustManager</echo>
				<copy file="${extlibs}/KonyAllowAllTrustManager.jar" tofile="${app.dir}/libs/KonyAllowAllTrustManager.jar" overwrite="true"/>
			</then>
		</if>
		<echo>Copying Vulkan libs </echo>
		<copy file="${extlibs}/Vulkanlibrary.jar" tofile="${app.dir}/libs/Vulkanlibrary.jar" overwrite="true"/>
		<echo>Copying Renderscript toolkit </echo>
		<copy file="${extlibs}/renderscript-toolkit-release.aar" tofile="${app.dir}/libs/renderscript-toolkit-release.aar" overwrite="true"/>
		<if>
			<equals arg1="${dev.language}" arg2="js"/>
			<then>
				<if>
					<equals arg1="${support_arm_64bit}" arg2="true"/>
					<then>
						<copy file="${extlibs}/arm64-v8a/libc++_shared.so" tofile="${app.dir}/libs/arm64-v8a/libc++_shared.so" overwrite="true"/>
						<copy file="${extlibs}/vulkan/arm64-v8a/libvulkan_wrapper.so" tofile="${app.dir}/libs/arm64-v8a/libvulkan_wrapper.so" overwrite="true"/>
					</then>
				</if>
						<if>
					<equals arg1="${support_x86_64bit}" arg2="true"/>
							<then>
								<copy file="${extlibs}/x86_64/libc++_shared.so" tofile="${app.dir}/libs/x86_64/libc++_shared.so" overwrite="true"/>
								<copy file="${extlibs}/vulkan/x86_64/libvulkan_wrapper.so" tofile="${app.dir}/libs/x86_64/libvulkan_wrapper.so" overwrite="true"/>
					     </then>
					    </if>

				<if>
					<equals arg1="${support_arm_32bit}" arg2="true"/>
					<then>
						<copy file="${extlibs}/armeabi-v7a/libc++_shared.so" tofile="${app.dir}/libs/armeabi-v7a/libc++_shared.so" overwrite="true"/>
						<copy file="${extlibs}/vulkan/armeabi-v7a/libvulkan_wrapper.so" tofile="${app.dir}/libs/armeabi-v7a/libvulkan_wrapper.so" overwrite="true"/>
					</then>
				</if>
						<if>
					<equals arg1="${support_x86_32bit}" arg2="true"/>
							<then>
								<copy file="${extlibs}/x86/libc++_shared.so" tofile="${app.dir}/libs/x86/libc++_shared.so" overwrite="true"/>
								<copy file="${extlibs}/vulkan/x86/libvulkan_wrapper.so" tofile="${app.dir}/libs/x86/libvulkan_wrapper.so" overwrite="true"/>
							</then>
						</if>


				      <!-- The below antcall target will bundle konyframework jars  -->
				      <ant antfile="${currentfile}" target="bundle-features"/>
					<!-- START: HPHX-1467 Adding STRICT mode jars to the libs based on the strictMode value. -->
					<!-- The below antcall target will bundle konyframeworkStrict jars  -->
					<echo>strictMode = ${strictMode}</echo>
					<if>
						<equals arg1="${strictMode}" arg2="true"/>
						<then>
							<ant antfile="${currentfile}" target="bundle-strict-jars"/>
						</then>
					</if>
					<!-- END: HPHX-1467 Adding STRICT mode jars to the libs based on the strictMode value. -->


				<if>
					<equals arg1="${build.option.local}" arg2="debug"/>
					<then>
						<if>
							<equals arg1="${support_arm_64bit}" arg2="true"/>
							<then>
								<copy file="${extlibs}/arm64-v8a/libkonyjsvm_debug.so" tofile="${app.dir}/libs/arm64-v8a/libkonyjsvm.so" overwrite="true"/>
							</then>
						</if>
								<if>
							 <equals arg1="${support_x86_64bit}" arg2="true"/>
							         <then>
								           <copy file="${extlibs}/x86_64/libkonyjsvm_debug.so" tofile="${app.dir}/libs/x86_64/libkonyjsvm.so" overwrite="true"/>
							         </then>
								</if>
						<if>
							<equals arg1="${support_arm_32bit}" arg2="true"/>
							<then>
								<copy file="${extlibs}/armeabi-v7a/libkonyjsvm_debug.so" tofile="${app.dir}/libs/armeabi-v7a/libkonyjsvm.so" overwrite="true"/>
							</then>
						</if>
								<if>
							 <equals arg1="${support_x86_32bit}" arg2="true"/>
							         <then>
								           <copy file="${extlibs}/x86/libkonyjsvm_debug.so" tofile="${app.dir}/libs/x86/libkonyjsvm.so" overwrite="true"/>
							         </then>
						</if>
						<copy file="${extlibs}/java_websocket.jar" tofile="${app.dir}/libs/java_websocket.jar" overwrite="true"/>
					</then>
					<elseif>
						<equals arg1="${build.option.local}" arg2="release"/>
						<then>
							<if>
								<equals arg1="${support_arm_64bit}" arg2="true"/>
								<then>
									<copy file="${extlibs}/arm64-v8a/libkonyjsvm_release.so" tofile="${app.dir}/libs/arm64-v8a/libkonyjsvm.so" overwrite="true"/>
								</then>
							</if>
									<if>
								<equals arg1="${support_x86_64bit}" arg2="true"/>
										<then>
											  <copy file="${extlibs}/x86_64/libkonyjsvm_release.so" tofile="${app.dir}/libs/x86_64/libkonyjsvm.so" overwrite="true"/>
										</then>
									</if>
							<if>
								<equals arg1="${support_arm_32bit}" arg2="true"/>
								<then>
									<copy file="${extlibs}/armeabi-v7a/libkonyjsvm_release.so" tofile="${app.dir}/libs/armeabi-v7a/libkonyjsvm.so" overwrite="true"/>
								</then>
							</if>
								    <if>
								<equals arg1="${support_x86_32bit}" arg2="true"/>
										<then>
											  <copy file="${extlibs}/x86/libkonyjsvm_release.so" tofile="${app.dir}/libs/x86/libkonyjsvm.so" overwrite="true"/>
										</then>
							</if>
						</then>
					</elseif>
					<else>
						<copy file="${extres}/stringconstants.xml" tofile="${app.dir}/res/values/stringconstants.xml" overwrite="true"/>
						<if>
							<equals arg1="${support_arm_64bit}" arg2="true"/>
							<then>
								<copy file="${extlibs}/arm64-v8a/libkonyjsvm_release_protected.so" tofile="${app.dir}/libs/arm64-v8a/libkonyjsvm.so" overwrite="true"/>
							</then>
						</if>
							    <if>
							<equals arg1="${support_x86_64bit}" arg2="true"/>
									  <then>
											 <copy file="${extlibs}/x86_64/libkonyjsvm_release_protected.so" tofile="${app.dir}/libs/x86_64/libkonyjsvm.so" overwrite="true"/>
									  </then>
								</if>
						<if>
							<equals arg1="${support_arm_32bit}" arg2="true"/>
							<then>
								<copy file="${extlibs}/armeabi-v7a/libkonyjsvm_release_protected.so" tofile="${app.dir}/libs/armeabi-v7a/libkonyjsvm.so" overwrite="true"/>
							</then>
						</if>
								<if>
							<equals arg1="${support_x86_32bit}" arg2="true"/>
									  <then>
											 <copy file="${extlibs}/x86/libkonyjsvm_release_protected.so" tofile="${app.dir}/libs/x86/libkonyjsvm.so" overwrite="true"/>
									  </then>
								</if>

					</else>
				</if>
			</then>
		</if>
		<if>
			<equals arg1="${UseSQLCipherFIPS}" arg2="true"/>
			<then>
				<!--Copy FIPS SQL libs -->
				<copy todir="${app.dir}/libs/" overwrite="true">
					<fileset dir="${extlibs}/SQLCIPHER_FIPS/libs/" includes="*.jar"/>
				</copy>
				<copy file="${extres}/konysqlcipher.jar" tofile="${app.dir}/libs/konysqlcipher.jar" overwrite="true"/>
				<if>
					<equals arg1="${support_arm_64bit}" arg2="true"/>
					<then>
						<copy file="${extlibs}/CryptoWrapper/arm64-v8a/libcrypto_wrapper.so" tofile="${app.dir}/libs/arm64-v8a/libcrypto_wrapper.so" overwrite="true"/>
						<copydir src="${extlibs}/SQLCIPHER_FIPS/libs/arm64-v8a" dest="${app.dir}/libs/arm64-v8a" />
						<copydir src="${extlibs}/CryptoLib/arm64-v8a/"  dest="${app.dir}/libs/arm64-v8a" />
					</then>
				</if>
				<if>
					<equals arg1="${support_x86_64bit}" arg2="true"/>
					<then>
						<copy file="${extlibs}/CryptoWrapper/x86_64/libcrypto_wrapper.so" tofile="${app.dir}/libs/x86_64/libcrypto_wrapper.so" overwrite="true"/>
						<copydir src="${extlibs}/SQLCIPHER_FIPS/libs/x86_64" dest="${app.dir}/libs/x86_64" />
						<copydir src="${extlibs}/CryptoLib/x86_64/"  dest="${app.dir}/libs/x86_64" />
					</then>
				</if>
				<if>
					<equals arg1="${support_arm_32bit}" arg2="true"/>
					<then>
						<copy file="${extlibs}/CryptoWrapper/armeabi-v7a/libcrypto_wrapper.so" tofile="${app.dir}/libs/armeabi-v7a/libcrypto_wrapper.so" overwrite="true"/>
						<copydir src="${extlibs}/SQLCIPHER_FIPS/libs/armeabi-v7a" dest="${app.dir}/libs/armeabi-v7a" />
						<copydir src="${extlibs}/CryptoLib/armeabi-v7a/"  dest="${app.dir}/libs/armeabi-v7a" />
					</then>
				</if>
				<if>
					<equals arg1="${support_x86_32bit}" arg2="true"/>
					<then>
						<copy file="${extlibs}/CryptoWrapper/x86/libcrypto_wrapper.so" tofile="${app.dir}/libs/x86/libcrypto_wrapper.so" overwrite="true"/>
						<copydir src="${extlibs}/SQLCIPHER_FIPS/libs/x86" dest="${app.dir}/libs/x86"/>
						<copydir src="${extlibs}/CryptoLib/x86" dest="${app.dir}/libs/x86"/>
					</then>
				</if>

			</then>
		</if>
		<if>
			<equals arg1="${UseOpenSSLLibrary}" arg2="true"/>
			<then>
				<if>
					<equals arg1="${support_arm_64bit}" arg2="true"/>
					<then>
						<copy file="${extlibs}/CryptoWrapper/arm64-v8a/libcrypto_wrapper.so" tofile="${app.dir}/libs/arm64-v8a/libcrypto_wrapper.so" overwrite="true"/>
						<copydir src="${extlibs}/CryptoLib/arm64-v8a/"  dest="${app.dir}/libs/arm64-v8a" />
					</then>
				</if>
						<if>
					<equals arg1="${support_x86_64bit}" arg2="true"/>
							<then>
						      <copy file="${extlibs}/CryptoWrapper/x86_64/libcrypto_wrapper.so" tofile="${app.dir}/libs/x86_64/libcrypto_wrapper.so" overwrite="true"/>
							  <copydir src="${extlibs}/CryptoLib/x86_64/"  dest="${app.dir}/libs/x86_64" />
					        </then>
				        </if>
				<if>
					<equals arg1="${support_arm_32bit}" arg2="true"/>
					<then>
						<copy file="${extlibs}/CryptoWrapper/armeabi-v7a/libcrypto_wrapper.so" tofile="${app.dir}/libs/armeabi-v7a/libcrypto_wrapper.so" overwrite="true"/>
						<copydir src="${extlibs}/CryptoLib/armeabi-v7a/"  dest="${app.dir}/libs/armeabi-v7a" />
					</then>
				</if>
						<if>
					<equals arg1="${support_x86_32bit}" arg2="true"/>
							<then>
						      <copy file="${extlibs}/CryptoWrapper/x86/libcrypto_wrapper.so" tofile="${app.dir}/libs/x86/libcrypto_wrapper.so" overwrite="true"/>
	   						  <copydir src="${extlibs}/CryptoLib/x86" dest="${app.dir}/libs/x86"/>
					        </then>
				        </if>

			</then>
		</if>
		<if>
			<equals arg1="${platform.lib.metrics.thirdparty}" arg2="crittercism"/>
			<then>
				<copy todir="${app.dir}/libs">
					<fileset dir="${extlibs}/Crittercism/libs" includes="**/*.jar"/>
				</copy>
			</then>
		</if>
		<!--
			***************************************************************************************
										Copy JS Bindings Libraries
			****************************************************************************************
		-->
		<if>
			<and>
    		<not>
    			  <equals arg1="${androidssm}" arg2=""/>
    		</not>
			<not>
				  <equals arg1="${androidssm}" arg2="$${androidssm}"/>
    		</not>
			</and>
    		<then>
				<property name="enableJSBindings" value="true"/>
    		</then>
		</if>
		<if>
			<equals arg1="${usesvideo}" arg2="true"/>
    		<then>
				<property name="enableJSBindings" value="true"/>
    		</then>
    		<else>
    			<if>
    				<available file="${app.dir}/libs/kony-video-widget.jar"/>
					<then>
    					<delete file="${app.dir}/libs/kony-video-widget.jar" />
    				</then>
    			</if>
    		</else>
		</if>
		<if>
			<or>
			<equals arg1="${enableMobileFirstAPIs}" arg2="true"/>
			<equals arg1="${enableJSBindings}" arg2="true"/>
			</or>
			<then>
				<copy file="${extlibs}/jsbindings.jar" tofile="${app.dir}/libs/jsbindings.jar" overwrite="true"/>
				<copy file="${extlibs}/commons-lang3-node-java.jar" tofile="${app.dir}/libs/commons-lang3-node-java.jar" overwrite="true"/>
				<copy file="${extlibs}/dexmaker-1.2.jar" tofile="${app.dir}/libs/dexmaker-1.2.jar" overwrite="true"/>
				<!--if>
					<equals arg1="${bundle64bitlibs}" arg2="true" />
					<then>
						<copy file="${extlibs}/arm64-v8a/libnativejsbindings.so" tofile="${app.dir}/libs/arm64-v8a/libnativejsbindings.so" overwrite="true"/>
					</then>
					<else>
						<copy file="${extlibs}/armeabi-v7a/libnativejsbindings.so" tofile="${app.dir}/libs/armeabi-v7a/libnativejsbindings.so" overwrite="true"/>
					</else>
				</if>
				<if>
					<equals arg1="${supportx86}" arg2="true"/>
					<then>
						<if>
							<equals arg1="${bundlex8664bitlibs}" arg2="true" />
							<then>
								<copy file="${extlibs}/x86_64/libnativejsbindings.so" tofile="${app.dir}/libs/x86_64/libnativejsbindings.so" overwrite="true"/>
							</then>
							<else>
								<copy file="${extlibs}/x86/libnativejsbindings.so" tofile="${app.dir}/libs/x86/libnativejsbindings.so" overwrite="true"/>
							</else>
						</if>
					</then>
				</if-->
			</then>
		</if>
    </target>

	<target name="add-googleplayservices-gradle-dependencies">
		<echo message="libtype = ${libtype}" />
		<if>
    		<equals arg1="${libtype}" arg2="map"/>
    		<then>
				<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_MAPS" value="${maplibversion}"/>
    		</then>
    	<else>
    		<if>
    		<equals arg1="${libtype}" arg2="location"/>
    			<then>
    				<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_LOCATION" value="${locationlibversion}"/>
    			</then>
    		</if>
    	</else>
    	</if>
	</target>
	<target name="configure-play-auth-dependent-features">
		<var name="auth_dependency" value=""/>
		<var name="phone_auth_dependency" value=""/>

        <if>
            <equals arg1="${addSMSRetrieverSupport}" arg2="$${addSMSRetrieverSupport}"/>
            <then>
            <property name="sms_retriever_receiver" value=""/>
            </then>
        <else>
            <property name="sms_retriever_receiver" value="&lt;receiver android:name=&quot;com.konylabs.api.sms.SMSBroadcastReceiver&quot; android:exported=&quot;true&quot;&gt;${line.separator}&lt;intent-filter&gt;${line.separator}&lt;action android:name=&quot;com.google.android.gms.auth.api.phone.SMS_RETRIEVED&quot;/&gt;${line.separator}${line.separator}&lt;/intent-filter&gt;${line.separator}&lt;/receiver&gt;" />
            <if>
                <equals arg1="${addSMSRetrieverSupport}" arg2="Non-UI" />
                <then>
                    <var name="phone_auth_dependency" value="${dependencies_google_play_auth_api_phone_version}"/>
                </then>
            <elseif>
                <equals arg1="${addSMSRetrieverSupport}" arg2="UI"/>
                <then>
                    <var name="phone_auth_dependency" value="${dependencies_google_play_auth_api_phone_version}"/>
                    <var name="auth_dependency" value ="${dependencies_google_play_auth_version}" />
                </then>
            </elseif>
            </if>
        </else>
        </if>
        <replace file="${app.dir}/AndroidManifest.xml" token="$SMS_RETRIEVER_RECEIVER" value="${sms_retriever_receiver}"/>

        <if>
        <equals arg1="${supportGooglePlayAuthLib}" arg2="true" />
        <then>
            <var name="auth_dependency" value ="${dependencies_google_play_auth_version}" />
        </then>
        </if>
         <replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_SERVICES_AUTH" value="${auth_dependency}"/>
         <replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_AUTH_API_PHONE" value="${phone_auth_dependency}"/>

    </target>

	<target name="getFolderName">
		<basename property="foldername" file="${line}"/>
		<echo message="foldername = ${foldername}"/>
		<var name="folder" value="${foldername}"/>
	</target>

	<target name="renamelaunchericon">
		<dirset id="drawableDir" dir="${app.dir}/res" includes="drawable*"/>
		<property name="drawableFoldersList" refid="drawableDir"/>
		<for list="${drawableFoldersList}" delimiter=";" param="directory" >
			<sequential>
				<if>
					<available file="${app.dir}/res/@{directory}/${iconname}" />
					<then>
						<copy file="${app.dir}/res/@{directory}/${iconname}" tofile="${app.dir}/res/@{directory}/${ApplicationId}_icon.png" overwrite="true"/>
					</then>
				</if>
			</sequential>
		</for>
	</target>

	<target name="convertAppidInLowerCase">
		<taskdef name="ConvertStringToLowerCase" classname="ConvertStringToLowerCase">
			<classpath>
				<pathelement location="${extres}/ConvertStringToLowerCase.jar"/>
			</classpath>
		</taskdef>

		<ConvertStringToLowerCase inputString="${appid}" property="ApplicationId"/>
	</target>

    <target name="gen">
        <echo>Building android source code</echo>
		<if>
			<available file="${plugin.loc}/lib/KonyAntScript.jar"/>
			<then>
				<osfamily property="os.family"/>
				<if>
					<equals arg1="${os.family}" arg2="windows"/>
					<then>
						<propertyregex property="andhome" input="${android.home}" regexp="\\" replace="//" defaultValue="${android.home}"/>
					</then>
					<else>
						<property name="andhome" value="${android.home}"/>
					</else>
				</if>
			</then>
			<else>
				 <propertyregex property="andhome" input="${android.home}" regexp="\\" replace="//"/>
			</else>
		</if>
    	<if>
    		   <equals arg1="${packagename}" arg2="$${packagename}"/>
    		<then>
    			<echo message="The value of packagename is empty" />
    			<property name="package" value="com.konylabs.${appid}"/>
    		</then>
    	<else>
    		<if>
    			<equals arg1="${packagename}" arg2="" />
    			<then>
    				<echo message="The value of packagename is empty" />
    				<property name="package" value="com.konylabs.${appid}"/>
    			</then>
    		<else>
    			<echo message="The value of packagename is ${packagename}" />
    			<property name="package" value="${packagename}"/>
    		</else>
    		</if>
    	</else>
    	</if>
        <propertyregex property="packagepath" input="${package}" regexp="\." replace="//"/>
    	<!-- Creating source folder -->
    	<echo message="Creating package path: ${app.dir}/src/${packagepath}"/>
    	<mkdir dir="${app.dir}/src/${packagepath}"/>
    	<move file="${app.dir}/src/APPID.java" tofile="${app.dir}/src/${packagepath}/${appid}.java" overwrite="true"/>
    	<replace file="${app.dir}/AndroidManifest.xml" token="$PACKAGE" value="${package}"/>
		<!--<replace file="${app.dir}/AndroidManifest.xml" token="$MINSDKVERSION" value="${andminsdkkey}"/> -->
    	<replace file="${app.dir}/AndroidManifest.xml" token="$VERSIONNAME" value="${appversion}"/>
		<replace file="${app.dir}/AndroidManifest.xml" token="$VERSIONCODE" value="${appversioncode}"/>
        <replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$PACKAGE" value="${package}"/>
        <replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$APPID" value="${appid}"/>
        <replace file="${app.dir}/local.properties" token="$ANDROIDSDK" value="${andhome}"/>
		<if>
			<equals arg1="${isFPbuild}" arg2="true"/>
			<then>
			    <replace file="${app.dir}/res/values/strings.xml" token="$APPID" value="${appname} preview"/>
				<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$APP_SOURCE_LOC" value="1" />
			</then>
			<else>
			    <replace file="${app.dir}/res/values/strings.xml" token="$APPID" value="${appname}"/>
			</else>
		</if>
				
		<!-- 
			For CI build in Linux environment, gradle build would fail at compileDebugRenderscript task
			as 'arm-linux-androideabi-ld' could not be started with build-tools 29.0.2.
			Google bug raised : https://issuetracker.google.com/issues/179291070
		-->
		
		<if>
			<equals arg1="${os.name}" arg2="Linux"/>
			<then>
				<echo> 
				renderscriptSupportModeEnabled disabled for Linux as arm-linux-androideabi-ld could not be started for compileDebugRenderscript task during CI build in Linux environment 
				</echo>
				<replaceregexp match="renderscriptSupportModeEnabled true" replace="renderscriptSupportModeEnabled false" flags="g" byline="true">
					<fileset file="${app.dir}/build.gradle"/>
				</replaceregexp>
			</then>
		</if>
		<!--
			***************************************************************************************
			INCLUDE GOOGLE PLAY SERVICES LIBRARY PROJECT IF 'usegoogleplaylocationservices" IS true
			****************************************************************************************
		-->

		<echo> usegoogleplaylocationservices: ${usegoogleplaylocationservices.local} </echo>
		<if>
    		<equals arg1= "${usegoogleplaylocationservices.local}" arg2= "true"/>
    		<then>
				<ant antfile="${currentfile}" target="add-googleplayservices-gradle-dependencies">
					<property name="libtype" value="location"/>
				</ant>
			</then>
		</if>
		<ant antfile="${currentfile}" target="configure-play-auth-dependent-features"/>		
		<ant antfile="${currentfile}" target="addGoogleMapEntries"/>
		<ant antfile="${currentfile}" target="addHuaweiMobileServicesEntries"/>
		
		<if>
			<or>
				<equals arg1= "${usegoogleplaylocationservices.local}" arg2= "true"/>
				<equals arg1="${useHuaweiMapAndLocationServices.local}" arg2="true" />
			</or>
			<then>
				<property name="geofence_manifest_entries" value="&lt;receiver android:name=&quot;com.konylabs.api.location.KonyGeofenceBroadcastReceiver&quot; ${line.separator}           android:enabled=&quot;true&quot;${line.separator}           android:exported=&quot;true&quot;/&gt;${line.separator}           &lt;service android:name=&quot;com.konylabs.api.location.KonyGeoTransitionsJobIntentService&quot; ${line.separator}          android:exported=&quot;false&quot;${line.separator}           android:permission=&quot;android.permission.BIND_JOB_SERVICE&quot;/&gt;" />	
			</then>
			<else>
				<property name="geofence_manifest_entries" value="" />
			</else>
		</if>
		<replace file="${app.dir}/AndroidManifest.xml" token="$GEOFENCE_MANIFEST_ENTRIES" value="${geofence_manifest_entries}" />

		<ant antfile="${currentfile}" target="addGoogleMapEntries"/>
		<!--
			***********************************************************
			Replacing SEARCH BAR related entries in AndroidManifest.xml
			***********************************************************	
		-->
		<if>
    		<equals arg1= "${enablesearchbar.local}" arg2= "true"/>
    		<then>
			<move file="${app.dir}/src/PROVIDER.java" tofile="${app.dir}/src/${packagepath}/${appid}SearchSuggestionProvider.java" overwrite="true"/>
			<replace file="${app.dir}/AndroidManifest.xml" token="$SEARCH_PROVIDER"
				value="&lt;provider android:authorities=&quot;${package}.${appid}SuggestionProvider&quot;
								 android:name=&quot;${package}.${appid}SearchSuggestionProvider&quot; /&gt;"/>

			<replace file="${app.dir}/AndroidManifest.xml" token="$SEARCHABLE_META_DATA"
				value="&lt;meta-data android:name=&quot;android.app.default_searchable&quot;
								  android:value=&quot;.KonyMain&quot; /&gt;"/>
			<replace file="${app.dir}/AndroidManifest.xml" token="$ACTION_SEARCH_INTENTFILTER"
				value=" &lt;intent-filter&gt;
							&lt;action android:name=&quot;android.intent.action.SEARCH&quot; /&gt;
							&lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;
						&lt;/intent-filter&gt;"/>
			<replace file="${app.dir}/AndroidManifest.xml" token="$SEARCH_META_DATA"
				value=" &lt;meta-data
							android:name=&quot;android.app.searchable&quot;
							android:resource=&quot;@xml/searchable&quot; /&gt;"/>

			<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$IMPORT_SEARCH_CLASSES"
						value="import com.konylabs.search.SearchDataAdapter;${line.separator}
						import android.provider.SearchRecentSuggestions;${line.separator}
						import android.content.Intent;${line.separator}
						import android.app.SearchManager;${line.separator}"/>
			<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$HANDLE_SEARCH_INTENT"
					 value="public void onNewIntent(Intent intent) {${line.separator}
						if (Intent.ACTION_SEARCH.equals(intent.getAction())) {${line.separator}
							// handles a search query${line.separator}
							String query = intent.getStringExtra(SearchManager.QUERY);${line.separator}
							String extraData = intent.getStringExtra(&quot;intent_extra_data_key&quot;);${line.separator}
							SearchRecentSuggestions suggestions = new SearchRecentSuggestions(this,${line.separator}
									${appid}SearchSuggestionProvider.AUTHORITY, ${appid}SearchSuggestionProvider.MODE);${line.separator}
							suggestions.saveRecentQuery(query, extraData);${line.separator}
							SearchDataAdapter.getInstance().raiseOnDoneCallback(query,extraData);${line.separator}
						}${line.separator}
						else${line.separator}
							super.onNewIntent(intent);${line.separator}
					}${line.separator}"/>
			<replace file="${app.dir}/src/${packagepath}/${appid}SearchSuggestionProvider.java" token="$PACKAGE" value="${package}"/>
			<replace file="${app.dir}/src/${packagepath}/${appid}SearchSuggestionProvider.java" token="$AUTHORITY" value="${package}.${appid}SuggestionProvider"/>
			<replace file="${app.dir}/src/${packagepath}/${appid}SearchSuggestionProvider.java" token="$PROVIDER" value="${appid}SearchSuggestionProvider"/>
			<replace file="${app.dir}/res/xml/searchable.xml" token="$AUTHORITY" value="${package}.${appid}SuggestionProvider"/>
			<replace file="${app.dir}/res/values/strings.xml" token="$SEARCH_HINT" value="&lt;string name=&quot;search_hint&quot;&gt;Search&lt;/string&gt;"/>
			<replace file="${app.dir}/res/values/strings.xml" token="$SEARCH_LABEL" value="&lt;string name=&quot;search_label&quot;&gt;Search&lt;/string&gt;"/>
		</then>
			<else>
				<delete file="${app.dir}/src/PROVIDER.java"/>
				<delete file="${app.dir}/res/xml/searchable.xml"/>
				<replace file="${app.dir}/res/values/strings.xml" token="$SEARCH_HINT" value=""/>
				<replace file="${app.dir}/res/values/strings.xml" token="$SEARCH_LABEL" value=""/>
				<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$IMPORT_SEARCH_CLASSES" value=""/>
				<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$HANDLE_SEARCH_INTENT" value=""/>
				<replace file="${app.dir}/AndroidManifest.xml" token="$SEARCH_PROVIDER" value=""/>
				<replace file="${app.dir}/AndroidManifest.xml" token="$SEARCHABLE_META_DATA" value=""/>
				<replace file="${app.dir}/AndroidManifest.xml" token="$ACTION_SEARCH_INTENTFILTER" value=""/>
				<replace file="${app.dir}/AndroidManifest.xml" token="$SEARCH_META_DATA" value=""/>
			</else>
    	</if>

		<!-- 
			*************************************************************************************************
				Replacing $MANIFEST_CHILD_TAGS and $APPLICATION_CHILD_TAGS in AndroidManifest.xml
			*************************************************************************************************		
		-->

    	<if>
    		   <equals arg1="${andmanifesttags}" arg2="$${andmanifesttags}"/>
    		<then>
    			<echo message="No child tags defined for manifest tag" />
    			<property name="manifest_child_tags" value=""/>
    		</then>
			<else>
				<echo message="The value of andmanifesttags is ${andmanifesttags}" />
				<property name="manifest_child_tags" value="${andmanifesttags}"/>
			</else>
    	</if>

    	<if>
		   <equals arg1="${andapplicationtags}" arg2="$${andapplicationtags}"/>
		   <then>
		      <echo message="No child tags defined for application tag" />
		      <property name="application_child_tags" value=""/>
		   </then>
		   <else>
		      <echo message="The value of andapplicationtags is ${andapplicationtags}" />
		      <property name="application_child_tags" value="${andapplicationtags}"/>
		   </else>
		</if>
		<replace file="${app.dir}/AndroidManifest.xml"
						token="$MANIFEST_CHILD_TAGS"
						value="${manifest_child_tags}"
						/>
		<replace file="${app.dir}/AndroidManifest.xml"
						token="$APPLICATION_CHILD_TAGS"
						value="${application_child_tags}"
						/>


		<if>
		   <equals arg1="${activity_child_tags}" arg2="$${activity_child_tags}"/>
		   <then>
		      <echo message="No child tags defined through activity_child_tags" />
		      <var name="activitychildtags" value=""/>
		   </then>
		   <else>
		      <echo message="The value of activity_child_tags is ${activity_child_tags}" />
		      <var name="activitychildtags" value="${activity_child_tags}"/>
		   </else>
		</if>
		  <!-- Note:staticAppShortcutsXmlName property is defined in androidbuild.properties file  -->
		<if>
		   <not>
		      <equals arg1="${staticAppShortcutsXmlName}" arg2="$${staticAppShortcutsXmlName}" />
		   </not>
		   <then>
		      <echo>staticAppShortcutsXmlName : ${staticAppShortcutsXmlName} </echo>
		      <var name="appShortcutsMetaData" value = "&lt;meta-data android:name=&quot;android.app.shortcuts&quot;  android:resource=&quot;@xml/${staticAppShortcutsXmlName}&quot;/&gt;"  />

		      <if>
		         <and>
		            <not>
		               <equals arg1="${useHeadlessLauncherActivity}" arg2="true" />
		            </not>
		            <not>
		               <equals arg1="${useCustomHeadlessLauncherActivity}" arg2="true" />
		            </not>
		         </and>
		         <then>
		            <var name="activitychildtags" value=" ${activitychildtags} ${line.separator} ${appShortcutsMetaData}"/>
		         </then>
		      </if>
		   </then>
		   <else>
		      <var name="appShortcutsMetaData" value ="" />
		   </else>
		</if>
		<echo>appShortcutsMetaData : ${appShortcutsMetaData} </echo>

		<replace file="${app.dir}/AndroidManifest.xml"
						token="$MAIN_ACTIVITY_CHILD_TAGS"
						value="${activitychildtags}"
						/>
		<echo message="The value of andapplicationattrs is ${andapplicationattrs}" />
		<echo message="The value of ismipmapicon is ${ismipmapicon}" />
		<var name="application_attrs" value="${andapplicationattrs}"/>
		<if>
			<not>
				<contains string="${application_attrs}" substring="android:icon"/>
			</not>
			<then>
				<if>
					<equals arg1= "${ismipmapicon}" arg2= "true"/>
					<then>
						<echo>Setting mipmap icon: ${logo}</echo>
						<propertyregex property="logo.iconname" input="${logo}" regexp="[.][A-Za-z]*$" replace="" global="true" />
						<var name="application_attrs" value="android:icon=&quot;@mipmap/${logo.iconname}&quot; ${application_attrs}"/>
					</then>
					<else>
						<echo>Setting drawable icon: ${logo}</echo>
						<var name="application_attrs" value="android:icon=&quot;@drawable/${ApplicationId}_icon&quot; ${application_attrs}"/>
					</else>
				</if>
			</then>
		</if>
		<if>
			<not>
				<contains string="${application_attrs}" substring="android:label"/>
			</not>
			<then>
				<var name="application_attrs" value="android:label=&quot;@string/app_name&quot; ${application_attrs}"/>
			</then>
		</if>
		<if>
			<not>
				<contains string="${application_attrs}" substring="android:name"/>
			</not>
			<then>
				<var name="application_attrs" value="android:name=&quot;com.konylabs.android.KonyApplication&quot; ${application_attrs}"/>
			</then>
		</if>
		<if>
			<not>
				<contains string="${application_attrs}" substring="tools:replace=&quot;"/>
			</not>
			<then>
				<var name="application_attrs" value="tools:replace=&quot;icon&quot; ${application_attrs}"/>
			</then>
			<else>
				<propertyregex property="application_attrs_temp" input=" ${application_attrs}" regexp="tools:replace=&quot;" replace="tools:replace=&quot;icon," casesensitive="false" />
				<var name="application_attrs" value="${application_attrs_temp}"/>
			</else>
		</if>

		<if>
			<not>
				<contains string="${application_attrs}" substring="tools:remove=&quot;"/>
			</not>
			<then>
				<var name="application_attrs" value="tools:remove=&quot;supportsRtl&quot; ${application_attrs}"/>
			</then>
			<else>
				<propertyregex property="application_attrs_temp1" input=" ${application_attrs}" regexp="tools:remove=&quot;" replace="tools:remove=&quot;supportsRtl," casesensitive="false" />
				<var name="application_attrs" value="${application_attrs_temp1}"/>
			</else>
		</if>

		<!-- 
			*************************************************************************************************
				For test Automator to allow http connections for script downloads from Android Pie
			*************************************************************************************************		
		-->

		<if>
		    <equals arg1="${automationEnabled}" arg2="true"/>
			<then>
			    <if>
					<bool>
						<isgreaterthan arg1="${andtargetsdkkey}" arg2="27"/>
					</bool>
					<then>
                        <if>
							 <not>
								<contains string="${application_attrs}" substring="android:usesCleartextTraffic"/>
							</not>
							<then>
								<var name="application_attrs" value="android:usesCleartextTraffic=&quot;true&quot; ${application_attrs}"/>
							</then>
					    </if>

					</then>
				</if>
			</then>
        </if>

		<!--  Scoped storage is enabled when targetSdk is 29 or above  -->
		<!--  Adding "requestLegacyExternalStorage" attribute in application tag to use legacy storage system  -->
		<if>
			<and>
				<contains string="${androidmanifestpermissions}" substring="EXTERNAL_STORAGE"/>
				<bool>
					<isgreaterthan arg1= "${andtargetsdkkey}" arg2= "28"/>
				</bool>
			</and>
			<then>
				<var name="application_attrs" value="${application_attrs} android:requestLegacyExternalStorage=&quot;true&quot; "/>
			</then>
		</if>

		<replace file="${app.dir}/AndroidManifest.xml"
						token="$APPLICATION_ATTRS"
						value="${application_attrs}"
						/>
		<!--  Copying manifest attributes  -->
		<if>
    	   <equals arg1="${manifest_tag_attrs}" arg2="$${manifest_tag_attrs}"/>
    		<then>
    			<echo message="No attributes defined for manifest tag" />
    			<property name="manifesttagattrs" value=""/>
    		</then>
			<else>
				<echo message="The value of manifest_tag_attrs is ${manifest_tag_attrs}" />
				<property name="manifesttagattrs" value="${manifest_tag_attrs}"/>
			</else>
    	</if>
		<replace file="${app.dir}/AndroidManifest.xml"
						token="$MANIFEST_TAG_ATTRS"
						value="${manifesttagattrs}"
						/>
		<!--  Copying activity attributes  -->
		<echo message="The value of activityattrs is ${activityattrs}" />
		<if>
		<equals arg1="${activityattrs}" arg2="$${activityattrs}"/>
    		<then>
    			<var name="activity_attrs" value=""/>
    		</then>
		<else>
    			<var name="activity_attrs" value="${activityattrs}"/>
		</else>
		</if>
		<if>
			<not>
				<contains string="${activity_attrs}" substring="android:windowSoftInputMode"/>
			</not>
			<then>
				<var name="activity_attrs" value="android:windowSoftInputMode=&quot;adjustResize&quot; ${activity_attrs}"/>
			</then>
		</if>
		<if>
			<not>
				<contains string="${activity_attrs}" substring="android:screenOrientation"/>
			</not>
			<then>
				<var name="activity_attrs" value="android:screenOrientation=&quot;sensor&quot; ${activity_attrs}"/>
			</then>
		</if>
		<if>
			<not>
				<contains string="${activity_attrs}" substring="android:configChanges"/>
			</not>
			<then>
				<var name="activity_attrs" value="android:configChanges=&quot;locale|keyboardHidden|orientation|screenSize|screenLayout&quot; ${activity_attrs}"/>
			</then>
		</if>
		<if>
			<not>
				<contains string="${activity_attrs}" substring="android:launchMode"/>
			</not>
			<then>
				<var name="activity_attrs" value="android:launchMode=&quot;singleTask&quot; ${activity_attrs}"/>
			</then>
		</if>
		<if>
			<not>
				<contains string="${activity_attrs}" substring="android:label"/>
			</not>
			<then>
				<var name="activity_attrs" value="android:label=&quot;@string/app_name&quot; ${activity_attrs}"/>
			</then>
		</if>
		<if>
			<not>
				<contains string="${activity_attrs}" substring="android:name"/>
			</not>
			<then>
				<var name="activity_attrs" value="android:name=&quot;.${appid}&quot; ${activity_attrs}"/>
			</then>
			<else>
                    <!-- Note when using javascript code , attribute name should not have camel cases ex : "activityAttributes" will not work
                            in below code instead use "activity_attributes" -->
			   <getActivityNameFromAttributesUsingJavaScript activity_attributes="${activity_attrs}" property="customMainActivityName" />
			   <echo>customMainActivityName:${customMainActivityName}</echo>
			   <!-- if true means custom KonyMain activity is defined -->
			   <if>
			      <not>
			         <equals arg1="${customMainActivityName}" arg2="$${customMainActivityName}" />
			      </not>
			      <then>
			         <checkIsClassNameRelativeUsingJavaScript custom_main_activity_class="${customMainActivityName}" property="isRelativeClassName" />
			         <echo>isRelativeClassName:${isRelativeClassName}</echo>
			      </then>
			   </if>
			</else>
		</if>
		<!-- note : activity_theme_attr property is used in makeLauncherChanges target when headless launcher activity is enabled  -->
		<if>
            <equals arg1="${isWatchBuild.Local}" arg2="true"/>
            <then>
                <var name="activity_theme_attr" value="android:theme=&quot;@style/WatchNoActionBarTheme&quot;"/>
            </then>
             <else>
                 <var name="activity_theme_attr" value="android:theme=&quot;@style/ActivityNoActionBarTheme&quot;"/>
             </else>
        </if>
        <if>
			<not>
				<contains string="${activity_attrs}" substring="android:theme"/>
			</not>
			<then>
                <if>
                    <equals arg1="${isWatchBuild.Local}" arg2="true"/>
                    <then>
                        <var name="activity_attrs" value="${activity_theme_attr} ${activity_attrs}"/>
                    </then>
                     <else>
                         <var name="activity_attrs" value="${activity_theme_attr} ${activity_attrs}"/>
                     </else>
                </if>
              </then>
        </if>
        <if>
        	<bool>
        		<isgreaterthan arg1="${andtargetsdkkey}" arg2="30"/>
        	</bool>
        	<then>
        		<var name="activity_attrs" value="${activity_attrs} android:exported=&quot;true&quot;"/>
        	</then>
        </if>
        <replace file="${app.dir}/AndroidManifest.xml"
						token="$ACTIVITY_ATTRS"
						value="${activity_attrs}"
						/>

          <!-- Invoke target for making launcher activity and android manifest changes  -->
         <ant antfile="${currentfile}"  target="makeLauncherChanges" />

		<!-- 
			*****************************************************
				Replacing $SDK_VERSIONS in build.gradle
			*****************************************************	
		-->
		<if>
			<equals arg1= "${andminsdkkey}" arg2= "None"/>
			<then>
			<property name="minsdkversion" value=""/>
			</then>
			<else>
			<property name="minsdkversion" value="minSdkVersion	${andminsdkkey}"/>
			</else>
		</if>
					<!--
						*****************************************************
						Adding uselibrary tag for org.apache.http for apps targeting greater than 27
						*****************************************************
					-->

		<if>
			<equals arg1= "${andtargetsdkkey}" arg2= "None"/>
			<then>
			<property name="andtargetsdkkey.local" value="26"/>
			</then>
			<else>
			<property name="andtargetsdkkey.local" value="${andtargetsdkkey}"/>
			</else>
		</if>

		<property name="targetsdkversion" value="targetSdkVersion	${andtargetsdkkey.local}"/>

		<if>
			<equals arg1= "${andmaxsdkkey}" arg2= "None"/>
			<then>
			<property name="maxsdkversion" value=""/>
			</then>
			<else>
			<property name="maxsdkversion" value="maxSdkVersion	${andmaxsdkkey}"/>
			</else>
		</if>
		<property name="usessdk" value="${maxsdkversion}${line.separator}${tab}${tab}${targetsdkversion}${line.separator}${tab}${tab}${minsdkversion}"/>
		<echo>Min SDK version: ${minsdkversion} </echo>
		<echo>Max SDK version: ${maxsdkversion} </echo>
		<echo>Target SDK version: ${targetsdkversion} </echo>
		<replace file="${app.dir}/build.gradle" token="$SDK_VERSIONS" value="${usessdk}"/>
		<if>
		<and>
			<equals arg1="${splitapks}" arg2="true"/>
			<equals arg1="${isFPbuild}" arg2="false"/>
		</and>
			<then>
				<replace file="${app.dir}/build.gradle" token="$SPLIT_APK_ENABLED" value="true"/>
			</then>
			<else>
				<replace file="${app.dir}/build.gradle" token="$SPLIT_APK_ENABLED" value="false"/>
			</else>
		</if>
		<echo>splashOrientationClassifier: ${splashOrientationClassifier} </echo>
		<if>
			<equals arg1="${splashOrientationClassifier}"  arg2="$${splashOrientationClassifier}" />
			<then>
				<property name="splashOrientationClassifier.local" value=""/>
			</then>
			<else>
				<property name="splashOrientationClassifier.local" value="${splashOrientationClassifier}"/>
			</else>
		</if>
		<if>
			<and>
				<or>
					<equals arg1="${usegoogleplaylocationservices.local}" arg2="true" />
					<equals arg1="${useHuaweiMapAndLocationServices.local}" arg2="true" />
				</or>	
				<not>
					<equals arg1="${locationListenerType}" arg2="$${locationListenerType}"/>
				</not>
			</and>
			<then>
			<if>
			<equals arg1="${locationListenerType}" arg2="always" />
			<then>
				<property name="optional_location_permissions" value="
					&lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE&quot;/&gt; ${line.separator}
					&lt;uses-permission android:name=&quot;android.permission.ACCESS_BACKGROUND_LOCATION&quot;/&gt; ${line.separator} &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot;/&gt;"/>
				<property name="foreground_service"
				value="&lt;service android:name=&quot;com.konylabs.api.service.KonyForegroundService&quot; ${line.separator}
				android:enabled=&quot;true&quot;${line.separator}
				android:foregroundServiceType=&quot;location&quot;/&gt;${line.separator}
				&lt;receiver android:name=&quot;com.konylabs.api.service.KonyForegroundServiceConnectionManager$KonyForegroundServiceBroadcastReceiver&quot; ${line.separator}
				android:enabled=&quot;true&quot;/&gt;"/>
			</then>
			<elseif>
				<equals arg1="${locationListenerType}" arg2="background" />
				<then>
					<property name="optional_location_permissions" value="
						&lt;uses-permission android:name=&quot;android.permission.ACCESS_BACKGROUND_LOCATION&quot;/&gt;${line.separator} &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot;/&gt;"/>
					<property name="foreground_service" value="" />
				</then>
			</elseif>
			<else>
				<!--By deafult, locationListenerType is foreground -->
				<property name="optional_location_permissions" value="" />
				<property name="foreground_service" value="" />
			</else>
			</if>
			</then>
			<else>
				<property name="optional_location_permissions" value="" />
				<property name="foreground_service" value="" />
			</else>
		</if>
		 <property name="background_permission_tag" value="android.permission.ACCESS_BACKGROUND_LOCATION"/>
		 <condition property="hasBGManifestTag" value="true" else="false">
			<matches pattern="${background_permission_tag}" string="${manifest_child_tags}"/>
         </condition>
		 <condition property="hasBGMEntryInOptionalPermissions" value="true" else="false">
			<matches pattern="${background_permission_tag}" string="${optional_location_permissions}"/>
         </condition>
		 <echo>ACCESS_BACKGROUND_LOCATION is defined in application manifest entry:  ${hasBGManifestTag} </echo>
		 <echo>ACCESS_BACKGROUND_LOCATION is added by location listener type: ${hasBGMEntryInOptionalPermissions} </echo>
		 <echo>enableBatteryOptimizationAPI is defined in androidbuild.properties file : ${enableBatteryOptimizationAPI} </echo>
		 <if>
			<equals arg1="${enableBatteryOptimizationAPI}" arg2="true"/>
			<then>
				<echo>Copying Battery Optimization Api related jars</echo>
				<copy file="${extlibs}/KonyFrameworkJars/OptionalJars/${build.option.local}/kony-battery-optimization-apis.jar"
						tofile="${app.dir}/libs/kony-battery-optimization-apis.jar" overwrite="true"/>
			</then>
		 </if>
		  
		<echo>useExternalBouncyCastleLibrary is defined in androidbuild.properties file : ${useExternalBouncyCastleLibrary} </echo>
		<if>
			<equals arg1="${useExternalBouncyCastleLibrary}" arg2="true"/>
			<then>
				<echo>Copying externalBouncyCastle jar</echo>

				<copy file="${extlibs}/bcprov-jdk15to18-1.78.jar" 
						tofile="${app.dir}/libs/bcprov-jdk15to18-1.78.jar" overwrite="true"/>	
			</then>
		 </if>
		  <echo>installPhotoPickerIfNotAvailable is defined in androidbuild.properties file : ${installPhotoPickerIfNotAvailable} </echo>
		<if>
			<not>
				<equals arg1="${installPhotoPickerIfNotAvailable}" arg2="$${installPhotoPickerIfNotAvailable}"/>
			</not>
			<then>
				<if>
					<equals arg1= "${installPhotoPickerIfNotAvailable}" arg2= "true"/>
					<then>
							<property name="backported_photo_picker_manifest_entries" 
								value="&lt;service android:name=&quot;com.google.android.gms.metadata.ModuleDependencies&quot; ${line.separator}           android:enabled=&quot;false&quot;${line.separator}android:exported=&quot;false&quot;${line.separator}tools:ignore=&quot;MissingClass&quot;&gt;${line.separator}&lt;intent-filter&gt;${line.separator}&lt;action android:name=&quot;com.google.android.gms.metadata.MODULE_DEPENDENCIES&quot;/&gt;${line.separator}${line.separator}&lt;/intent-filter&gt;${line.separator}&lt;meta-data android:name=&quot;photopicker_activity:0:required&quot; ${line.separator} android:value=&quot;&quot;/&gt; &lt;/service&gt;"  />
					</then>
					<else>
						<property name="backported_photo_picker_manifest_entries" value="" />
					</else>						
				</if>
			</then>
			<else>
				<property name="backported_photo_picker_manifest_entries" value="" />
			</else>	
		</if>
		<echo>backported_photo_picker_manifest_entries : ${backported_photo_picker_manifest_entries} </echo>
		<replace file="${app.dir}/AndroidManifest.xml" token="$BACKPORTED_PHOTO_PICKER_ENTRY" value="${backported_photo_picker_manifest_entries}" />
		
		 <if>
			<and>
				<or>
					<equals arg1="${usegoogleplaylocationservices.local}" arg2="true" />
					<equals arg1="${useHuaweiMapAndLocationServices.local}" arg2="true" />
				</or>
				<or>
					<equals arg1="${hasBGManifestTag}" arg2="true" />
					<equals arg1="${hasBGMEntryInOptionalPermissions}" arg2="true" />
				</or>
			</and>
			<then>
			  <property name="location_pendingintent_manifest_entries" value="&lt;receiver android:name=&quot;com.konylabs.api.location.KonyLocationUpdatesBroadcastReceiver&quot; ${line.separator}           android:enabled=&quot;true&quot;${line.separator}android:exported=&quot;true&quot;&gt;${line.separator}&lt;intent-filter&gt;${line.separator}&lt;action android:name=&quot;com.konylabs.api.location.konylocationupdatespendingintent.ACTION_PROCESS_UPDATES&quot;/&gt;${line.separator}${line.separator}&lt;/intent-filter&gt;${line.separator}&lt;/receiver&gt;${line.separator}&lt;service android:name=&quot;com.konylabs.api.location.KonyLocationUpdatesJobIntentService&quot; ${line.separator}          android:exported=&quot;false&quot;${line.separator}android:permission=&quot;android.permission.BIND_JOB_SERVICE&quot;/&gt;" />
			</then>
			<else>
				<property name="location_pendingintent_manifest_entries" value="" />
			</else>
		</if>
		<replace file="${app.dir}/AndroidManifest.xml" token="$LOCATION_PENDINGINTENT_MANIFEST_ENTRIES" value="${location_pendingintent_manifest_entries}" />
		<!--
			*************************************************************************************************************************************
				Replacing $PUSH_NOTIFICATION_PERMISSIONS,$PUSH_NOTIFICATION_RECEIVER in AndroidManifest.xml.
			*************************************************************************************************************************************
		-->


		<echo>enablepushnotifications ${enablepushnotifications}</echo>
      <echo>enablefcmpushnotifications ${enablefcmpushnotifications}</echo>
      <echo>customgcmbroadcastreceiver ${customgcmbroadcastreceiver}</echo>
      <echo>customfcmservice ${customfcmservice}</echo>
      <echo>FCM GCM</echo>
      <if>
         <equals arg1="${enablepushnotifications}" arg2="true" />
         <then>
            <if>
               <not>
                  <equals arg1="${customgcmbroadcastreceiver}" arg2="$${customgcmbroadcastreceiver}" />
               </not>
               <then>
                  <condition property="customgcmbroadcastreceiver.flag">
                     <and>
                        <length string="${customgcmbroadcastreceiver}" trim="true" when="greater" length="0" />
                     </and>
                  </condition>
                  <if>
                     <equals arg1="${customgcmbroadcastreceiver.flag}" arg2="true" />
                     <then>
                        <property name="customgcmbroadcastreceiver.local" value="${customgcmbroadcastreceiver}" />
                     </then>
                     <else>
                        <property name="customgcmbroadcastreceiver.local" value="com.konylabs.gcm.KonyGCMBroadcastReceiver" />
                     </else>
                  </if>
               </then>
               <else>
                  <property name="customgcmbroadcastreceiver.local" value="com.konylabs.gcm.KonyGCMBroadcastReceiver" />
               </else>
            </if>
            <property name="push_notification_permissions" value="&lt;permission android:name=&quot;${package}.permission.C2D_MESSAGE&quot; android:protectionLevel=&quot;signature&quot;/&gt;${line.separator}      &lt;uses-permission android:name=&quot;${package}.permission.C2D_MESSAGE&quot;/&gt;${line.separator}      &lt;uses-permission android:name=&quot;com.google.android.c2dm.permission.RECEIVE&quot;/&gt;${line.separator}      &lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot;/&gt;" />
            <property name="push_notification_intent_filter" value="&lt;intent-filter&gt;${line.separator}&lt;action android:name=&quot;${package}.GCM_MSG_VIEW&quot;/&gt;${line.separator}         &lt;action android:name=&quot;${package}.GCM_REGID_VIEW&quot;/&gt;${line.separator}           &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;${line.separator}&lt;/intent-filter&gt;" />
            <property name="push_notification_receiver_export_tag" value="" />
            <if>
            	<bool>
				    <isgreaterthan arg1="${andtargetsdkkey}" arg2="30"/>
				</bool>
				<then>
					<var name="push_notification_receiver_export_tag" value="android:exported=&quot;false&quot;" />
			    </then>
        	</if>
            <property name="push_notification_receiver" value="&lt;receiver android:name=&quot;${customgcmbroadcastreceiver.local}&quot; android:permission=&quot;com.google.android.c2dm.permission.SEND&quot; ${push_notification_receiver_export_tag}&gt;${line.separator}           &lt;intent-filter&gt;${line.separator}&lt;action android:name=&quot;com.google.android.c2dm.intent.RECEIVE&quot; /&gt;${line.separator}&lt;category android:name=&quot;${package}&quot; /&gt;${line.separator}           &lt;/intent-filter&gt;${line.separator}&lt;intent-filter&gt;${line.separator}&lt;action android:name=&quot;com.google.android.c2dm.intent.REGISTRATION&quot; /&gt;${line.separator}&lt;category android:name=&quot;${package}&quot; /&gt;${line.separator}           &lt;/intent-filter&gt;${line.separator}&lt;/receiver&gt;" />
            <property name="kony_local_service" value="&lt;service android:name=&quot;com.konylabs.api.service.KonyLocalService&quot;${line.separator}                                      android:enabled=&quot;true&quot;${line.separator}                                      android:exported=&quot;false&quot;&gt;${line.separator}                                       &lt;/service&gt;" />
            <property name="fcm_instance_id_service" value="" />
            <property name="fcm_service" value="" />
            <property name="google_fcm_dependency" value="" />
            <property name="classpath_google_services.local" value="" />
            <property name="apply_plugin_google_services.local" value="" />
            <property name="push_notification_type.local" value="1" />
         </then>
         <elseif>
            <equals arg1="${enablefcmpushnotifications}" arg2="true" />
            <then>
               <if>
                  <not>
                     <equals arg1="${customfcmservice}" arg2="$${customfcmservice}" />
                  </not>
                  <then>
                     <condition property="customfcmservice.flag">
                        <and>
                           <length string="${customfcmservice}" trim="true" when="greater" length="0" />
                        </and>
                     </condition>
                     <if>
                        <equals arg1="${customfcmservice.flag}" arg2="true" />
                        <then>
                           <property name="customfcmservice.local" value="${customfcmservice}" />
                        </then>
                        <else>
                           <property name="customfcmservice.local" value="com.konylabs.fcm.KonyFCMService" />
                        </else>
                     </if>
                  </then>
                  <else>
                     <property name="customfcmservice.local" value="com.konylabs.fcm.KonyFCMService" />
                  </else>
               </if>
               <property name="push_notification_permissions" value="" />
               <property name="push_notification_intent_filter" value="&lt;intent-filter&gt;${line.separator}&lt;action android:name=&quot;${package}.GCM_MSG_VIEW&quot;/&gt;${line.separator}                   &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;${line.separator}&lt;/intent-filter&gt;" />
               <property name="push_notification_receiver" value="" />
               <property name="kony_local_service" value="" />
               <property name="fcm_instance_id_service_export_tag" value="" />
               <if>
				    <bool>
				        <isgreaterthan arg1="${andtargetsdkkey}" arg2="30"/>
				    </bool>
				    <then>
				         <var name="fcm_instance_id_service_export_tag" value="android:exported=&quot;false&quot;" />
					</then>
        		</if> 
               <property name="fcm_instance_id_service" value="&lt;service android:name=&quot;com.konylabs.fcm.KonyFCMInstanceIdService&quot; ${fcm_instance_id_service_export_tag}&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;com.google.firebase.INSTANCE_ID_EVENT&quot;/&gt; &lt;/intent-filter&gt; &lt;/service&gt;" />
               <property name="fcm_service" value="&lt;service android:name=&quot;${customfcmservice.local}&quot; ${fcm_instance_id_service_export_tag}&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;com.google.firebase.MESSAGING_EVENT&quot;/&gt; &lt;/intent-filter&gt; &lt;/service&gt;" />
               <property name="google_fcm_dependency" value="${dependencies_google_fcm_messaging}" />
               <property name="classpath_google_services.local" value="${classpath_google_services}" />
               <property name="apply_plugin_google_services.local" value="${apply_plugin_google_services}" />
               <property name="push_notification_type.local" value="2" />
               <if>
                  <available file="${resfolder}/${resources.platform.folder}/fcm/google-services.json" />
                  <then>
                     <copy file="${resfolder}/${resources.platform.folder}/fcm/google-services.json" tofile="${app.dir}/google-services.json" overwrite="true" />
                  </then>
               </if>
            </then>
         </elseif>
         <else>
            <property name="push_notification_permissions" value="" />
            <property name="push_notification_intent_filter" value="" />
            <property name="push_notification_receiver" value="" />
            <property name="kony_local_service" value="" />
            <property name="fcm_instance_id_service" value="" />
            <property name="fcm_service" value="" />
            <property name="google_fcm_dependency" value="" />
            <property name="classpath_google_services.local" value="" />
            <property name="apply_plugin_google_services.local" value="" />
            <property name="push_notification_type.local" value="0" />
         </else>
      </if>
      <echo>Push Notification Permissions: ${push_notification_permissions}</echo>
      <echo>Push Notification Intent Filters: ${push_notification_intent_filter}</echo>
      <echo>Push Notification Intent Receiver: ${push_notification_receiver}</echo>
      <echo>Volt MX Local Service: ${kony_local_service}</echo>
      <replace file="${app.dir}/AndroidManifest.xml" token="$PUSH_NOTIFICATION_PERMISSIONS" value="${push_notification_permissions}" />
      <replace file="${app.dir}/AndroidManifest.xml" token="$PUSH_NOTIFICATION_RECEIVER" value="${push_notification_receiver}" />
	  <replace file="${app.dir}/AndroidManifest.xml" token="$OPTIONAL_LOCATION_PERMISSIONS" value="${optional_location_permissions}" />
	  <replace file="${app.dir}/AndroidManifest.xml" token="$FOREGROUND_SERVICE" value="${foreground_service}" />
      <replace file="${app.dir}/AndroidManifest.xml" token="$KONY_LOCAL_SERVICE" value="${kony_local_service}" />
      <replace file="${app.dir}/AndroidManifest.xml" token="$FCM_INSTANCE_ID_SERVICE" value="${fcm_instance_id_service}" />
      <replace file="${app.dir}/AndroidManifest.xml" token="$FCM_SERVICE" value="${fcm_service}" />
      <replace file="${app.dir}/build.gradle" token="$COMPILE_ANDROID_FCM_DEPENDENCIES" value="${google_fcm_dependency}" />
      <replace file="${app.dir}/build.gradle" token="$CLASSPATH_GOOGLE_SERVICES" value="${classpath_google_services.local}" />
      <replace file="${app.dir}/build.gradle" token="$GOOGLE_SERVICES_PLUGIN" value="${apply_plugin_google_services.local}" />
      <echo>push_notification_type.local ${push_notification_type.local}</echo>


	   <property name="ar_tag.local" value="&lt;meta-data
        android:name=&quot;com.google.ar.core&quot;
        android:value=&quot;optional&quot; /&gt;" />
		<if>
			 <equals arg1="${arEnabled}" arg2="true" />
			 <then>
				<property name="dependencies_sceneform_ux_version.local" value="${dependencies_sceneform_ux_version}" />
				<property name="dependencies_sceneform_assets_version.local" value="${dependencies_sceneform_assets_version}" />
				 <property name="dependencies_arcore_version.local" value="${dependencies_arcore_version}" />
				<property name="classpath_sceneform_plugin.local" value="${classpath_sceneform_plugin}" />
				<property name="apply_plugin_sceneform.local" value="${apply_plugin_sceneform}" />
				<property name="compile_options.local" value="${compile_options}" />
				<replace file="${app.dir}/AndroidManifest.xml" token="$AR_MANIFEST_LEVEL_TAGS" value="${ar_tag.local}" />
				<replace file="${app.dir}/AndroidManifest.xml" token="$AR_APPLICATION_LEVEL_TAGS" value="${ar_tag.local}" />
				<copy file="${extres}/chroma_key_video.sfb" tofile="${app.dir}/res/raw/chroma_key_video.sfb" overwrite="true"/>
			 </then>
			 <else>
				<property name="dependencies_sceneform_ux_version.local" value="" />
				<property name="dependencies_sceneform_assets_version.local" value="" />
				 <property name="dependencies_arcore_version.local" value="" />
				<property name="classpath_sceneform_plugin.local" value="" />
				<property name="apply_plugin_sceneform.local" value="" />
				<property name="compile_options.local" value="" />
				<replace file="${app.dir}/AndroidManifest.xml" token="$AR_APPLICATION_LEVEL_TAGS" value="" />
			</else>
		</if>

		  <replace file="${app.dir}/build.gradle" token="$COMPILE_AR" value="${dependencies_sceneform_ux_version.local}${line.separator}${dependencies_sceneform_assets_version.local}${line.separator}${dependencies_arcore_version.local}" />
		  <replace file="${app.dir}/build.gradle" token="$CLASSPATH_AR_PLUGIN" value="${classpath_sceneform_plugin.local}" />
		  <replace file="${app.dir}/build.gradle" token="$APPLY_AR_PLUGIN" value="${apply_plugin_sceneform.local}" />
		  <replace file="${app.dir}/build.gradle" token="$COMPILE_OPTIONS" value="${compile_options.local}" />






           <!--
			*************************************************************************************************************************************
				Replacing WEAR_BACKGROUND_LISTENER_SERVICE in AndroidManifest.xml.
			*************************************************************************************************************************************
		-->
        <!-- add watchBackgroundServiceListener if developer does not give "com.konylabs.api.wearable.KonyWearableListenerService" string in
        application attributes -->
        <if>
            <not>
                <contains string="${andapplicationtags}" substring="com.konylabs.api.wearable.KonyWearableListenerService"/>
            </not>
            <then>
                <echo>application childtags does not contain  com.konylabs.api.wearable.KonyWearableListenerService</echo>
                <if>
                    <or>
                        <equals arg1="${addWatchBackgroundListenerToReceiveMessagePayload}" arg2="true"/>
                        <equals arg1="${addWatchBackgroundListenerToReceiveDataPayload}" arg2="true"/>
                    </or>
                    <then>
                    	<property name="watch_background_listener_service_export_tag" value="" />
                    	<if>
				        	<bool>
				        		<isgreaterthan arg1="${andtargetsdkkey}" arg2="30"/>
				        	</bool>
				        	<then>
				        		<var name="watch_background_listener_service_export_tag" value="android:exported=&quot;true&quot;" />
			        		</then>
        				</if>
                        <property name = "watch_background_listener_service_start_tag"
                             value = "&lt;service android:name=&quot;com.konylabs.api.wearable.KonyWearableListenerService&quot; ${watch_background_listener_service_export_tag}&gt; ${line.separator}"
                                     />
                        <if>
                            <equals arg1="${addWatchBackgroundListenerToReceiveMessagePayload}" arg2="true"/>
                            <then>
                                <property name = "addMessageReceiver_IntentFilter"
                             value = "&lt;intent-filter&gt;${line.separator}
                                     &lt;action android:name=&quot;com.google.android.gms.wearable.MESSAGE_RECEIVED&quot; /&gt;${line.separator}
                                     &lt;data android:scheme=&quot;wear&quot;  android:host=&quot;*&quot; /&gt;${line.separator}
                                     &lt;/intent-filter&gt; ${line.separator}"  />
                            </then>
                            <else>
                                <property name = "addMessageReceiver_IntentFilter" value ="" />
                            </else>
                        </if>
                        <if>
                            <equals arg1="${addWatchBackgroundListenerToReceiveDataPayload}" arg2="true"/>
                            <then>
                                <property name = "addDataReceiver_IntentFilter"
                             value = "&lt;intent-filter&gt;${line.separator}
                                     &lt;action android:name=&quot;com.google.android.gms.wearable.DATA_CHANGED&quot; /&gt;${line.separator}
                                     &lt;data android:scheme=&quot;wear&quot;  android:host=&quot;*&quot; /&gt;${line.separator}
                                     &lt;/intent-filter&gt; ${line.separator}"  />
                            </then>
                            <else>
                                <property name = "addDataReceiver_IntentFilter" value ="" />
                            </else>
                        </if>
                        <property name = "watch_background_listener_service_end_tag"
                             value = "&lt;/service &gt;" />

                        <property  name = "watch_background_listener_service"
                   value = "${watch_background_listener_service_start_tag}${addMessageReceiver_IntentFilter}${addDataReceiver_IntentFilter} ${watch_background_listener_service_end_tag} " />

                    </then>
                    <else>
                        <property  name = "watch_background_listener_service" value = ""/>
                    </else>
                </if>
            </then>
            <else>
                <property  name = "watch_background_listener_service" value = ""/>
            </else>
        </if>
        <echo>watch_background_listener_service = ${watch_background_listener_service}</echo>

           <replace file="${app.dir}/AndroidManifest.xml"
               token=" $WEAR_BACKGROUND_LISTENER_SERVICE"
			   value="${watch_background_listener_service}"
               />

		<!--
			*************************************************************************************************************************************
				Replacing $DEEPLINK_INTENTFILTER in AndroidManifest.xml.
			*************************************************************************************************************************************	
		-->
		<if>
			<not>
			<equals arg1="${deeplinkscheme}" arg2="$${deeplinkscheme}"/>
			</not>
			<then>
				<echo file="deeplinkdata.txt" append="true"> &lt;intent-filter&gt;${line.separator}</echo>
				<echo file="deeplinkdata.txt" append="true"> &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;${line.separator}</echo>
				<echo file="deeplinkdata.txt" append="true"> &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot;/&gt;${line.separator}</echo>
				<echo file="deeplinkdata.txt" append="true"> &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt;${line.separator}</echo>
				<for list="${deeplinkscheme}" delimiter="," param = "val">
					<sequential>
						<echo> Adding scheme: @{val}</echo>
						<echo file="deeplinkdata.txt" append="true"> &lt;data android:scheme=&quot;@{val}&quot; /&gt;${line.separator}</echo>
					</sequential>
				</for>
				<if>
					<not>
						<equals arg1="${deeplinkhost}" arg2="$${deeplinkhost}"/>
					</not>
					<then>
						<for list="${deeplinkhost}" delimiter="," param = "val">
							<sequential>
								<echo> Adding host: @{val}</echo>
								<echo file="deeplinkdata.txt" append="true"> &lt;data android:host=&quot;@{val}&quot; /&gt;${line.separator}</echo>
							</sequential>
						</for>
					</then>
				</if>
				<if>
					<not>
						<equals arg1="${deeplinkport}" arg2="$${deeplinkport}"/>
					</not>
					<then>
						<for list="${deeplinkport}" delimiter="," param = "val">
							<sequential>
								<echo> Adding port: @{val}</echo>
								<echo file="deeplinkdata.txt" append="true"> &lt;data android:port=&quot;@{val}&quot; /&gt;${line.separator}</echo>
							</sequential>
						</for>
					</then>
				</if>
				<if>
					<not>
						<equals arg1="${deeplinkpath}" arg2="$${deeplinkpath}"/>
					</not>
					<then>
						<for list="${deeplinkpath}" delimiter="," param = "val">
							<sequential>
								<echo> Adding path: @{val}</echo>
								<echo file="deeplinkdata.txt" append="true"> &lt;data android:path=&quot;@{val}&quot; /&gt;${line.separator}</echo>
							</sequential>
						</for>
					</then>
				</if>
				<if>
					<not>
						<equals arg1="${deeplinkpathprefix}" arg2="$${deeplinkpathprefix}"/>
					</not>
					<then>
						<for list="${deeplinkpathprefix}" delimiter="," param = "val">
							<sequential>
								<echo> Adding path prefix: @{val}</echo>
								<echo file="deeplinkdata.txt" append="true"> &lt;data android:pathPrefix=&quot;@{val}&quot; /&gt;${line.separator}</echo>
							</sequential>
						</for>
					</then>
				</if>
				<if>
					<not>
						<equals arg1="${deeplinkpathpattern}" arg2="$${deeplinkpathpattern}"/>
					</not>
					<then>
						<for list="${deeplinkpathpattern}" delimiter="," param = "val">
							<sequential>
								<echo> Adding path pattern: @{val}</echo>
								<echo file="deeplinkdata.txt" append="true"> &lt;data android:pathPattern=&quot;@{val}&quot; /&gt;${line.separator}</echo>
							</sequential>
						</for>
					</then>
				</if>
				<echo file="deeplinkdata.txt" append="true"> &lt;/intent-filter&gt;${line.separator}</echo>
				<loadfile property="deeplink.prop" srcFile="deeplinkdata.txt"/>
				<replace file="${app.dir}/AndroidManifest.xml"
						token="$DEEPLINK_INTENTFILTER"
						value="${deeplink.prop}"
				/>
				<delete file="deeplinkdata.txt" />
			</then>
			<else>
				<replace file="${app.dir}/AndroidManifest.xml"
						token="$DEEPLINK_INTENTFILTER"
						value=""
				/>
			</else>
		</if>
		<!--
			***********************************************************
				Replacing $SUPPORT_SCREENS in AndroidManifest.xml
			***********************************************************	
		-->
		<if>
			<equals arg1="${isWatchBuild.Local}" arg2="true"/>
			<then>
				<replace file="${app.dir}/AndroidManifest.xml" token="$SUPPORT_SCREENS" value=""/>
			</then>
			<else>
				<if>
					<equals arg1= "${androidscreenanydensity}" arg2= "false"/>
					<then>
							<property name="anydensity" value=""/>
					</then>
					<else>
							<property name="anydensity" value="android:anyDensity =&quot;${androidscreenanydensity}&quot;"/>
					</else>
				</if>

				<property name="smallscreens" value="android:smallScreens =&quot;${androidscreensmall}&quot;"/>
				<property name="normalscreens" value="android:normalScreens =&quot;${androidscreennormal}&quot;"/>
				<property name="largescreens" value="android:largeScreens =&quot;${androidscreenlarge}&quot;"/>
				<if>
					<not>
						<equals arg1="${androidscreenextralarge}" arg2="$${androidscreenextralarge}"/>
					</not>
					<then>
						<if>
							<equals arg1= "${androidscreenextralarge}" arg2= "true"/>
							<then>
									<property name="xlargescreens" value="android:xlargeScreens =&quot;true&quot;"/>
							</then>
							<else>
								<property name="xlargescreens" value="android:xlargeScreens =&quot;false&quot;"/>
							</else>
						</if>
					</then>
				</if>
				<if>
					<equals arg1= "${androidscreenresizeable}" arg2= "false"/>
					<then>
							<property name="resizeable" value=""/>
					</then>
					<else>
							<property name="resizeable" value="android:resizeable =&quot;${androidscreenresizeable}&quot;"/>
					</else>
				</if>
				<echo>Any Density: ${anydensity}</echo>
				<echo>Small Screen: ${smallscreens} </echo>
				<echo>Normal Screen: ${normalscreens}</echo>
				<echo>Large Screen: ${largescreens} </echo>
				<echo>xLarge Screen: ${xlargescreens} </echo>
				<echo>Resizable: ${resizeable}</echo>
				<property name="screens" value="${anydensity} ${smallscreens} ${normalscreens} ${largescreens} ${xlargescreens} ${resizeable}"/>

				<replace file="${app.dir}/AndroidManifest.xml" token="$SUPPORT_SCREENS" value="&lt;supports-screens ${screens}/&gt;"/>
			</else>
		</if>
		<if>
			<equals arg1= "${andtargetsdkkey}" arg2= "None"/>
			<then>
				<property name="buildtargetsdkversion" value="android-7"/>
			</then>
			<else>
				<property name="buildtargetsdkversion" value="android-${andtargetsdkkey}"/>
			</else>
		</if>
		<if>
		<available file="${app.dir}/default.properties"/>
			<then>
		        <replace file="${app.dir}/default.properties" token="$ANDROIDAPI" value="${buildtargetsdkversion}"/>
			</then>
 		</if>
		<replace file="${app.dir}/project.properties" token="$ANDROIDAPI" value="${buildtargetsdkversion}"/>

		<!--
			***********************************************************
			Handling install location for auto or preferExternal
			***********************************************************	
		-->

		<if>
    		<equals arg1="${installlocation}" arg2="$${installlocation}"/>
    		<then>
				<echo>Install location not defined </echo>
				<replace file="${app.dir}/AndroidManifest.xml" token="$INSTALLLOCATION" value=""/>
    		</then>
			<else>
				<echo>Install location value defined:${installlocation}</echo>
				<replace file="${app.dir}/AndroidManifest.xml" token="$INSTALLLOCATION" value="android:installLocation=&quot;${installlocation}&quot;"/>
			</else>
		</if>

		<!--
			***********************************************************
				Replacing $PERMISSIONS_ALL in AndroidManifest.xml
			***********************************************************	
		-->
		<var name="pstr" value=""/>
		<if>
				<not>
					<equals arg1="${androidmanifestpermissions}" arg2="$${androidmanifestpermissions}"/>
				</not>
				<then>
					<for list="${androidmanifestpermissions}" param="letter">
						<sequential>
							<var name="tperm" value="&lt;uses-permission android:name=&quot;android.permission.@{letter}&quot;/&gt;${line.separator}"/>
							<var name="pstr" value="${pstr} ${tperm}"/>
						</sequential>
					</for>
					<if>
						<equals arg1="${automationEnabled}" arg2="true"/>
						<then>
							<var name="tperm" value="&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;${line.separator}"/>
							<var name="pstr" value="${pstr} ${tperm}"/>
						</then>
					</if>
					<if>
					   <and>
						<not>
							<equals arg1="${donotAddQueryAllPackages}" arg2="true"/>
						</not>
						<equals arg1="${build.option}" arg2="protected"/>
						<bool>
							<isgreaterthan arg1="${andtargetsdkkey}" arg2="29"/>
						</bool>
					   </and>
					   <then>
							<var name="tperm" value="&lt;uses-permission android:name=&quot;android.permission.QUERY_ALL_PACKAGES&quot;/&gt;${line.separator}"/>
							<var name="pstr" value="${pstr} ${tperm}"/>
					   </then>
					</if>
					<echo>Permissions set:</echo>
					<echo>${pstr}</echo>
					<replace file="${app.dir}/AndroidManifest.xml" token="$PERMISSIONS_ALL" value="${pstr}"/>
                    <condition property="usefingerprint" value="true" else="false">
                        <matches pattern="USE_FINGERPRINT" string="${androidmanifestpermissions}"/>
                    </condition>
			</then>
		</if>
        <if>
            <and>
                <equals arg1="${enableLocalAuthentication}" arg2="$${enableLocalAuthentication}"/>
                <equals arg1="${usefingerprint}" arg2="true"/>
            </and>
            <then>
                <property name="enableLocalAuthentication" value="true"/>
            </then>
        </if>
		<!--
			**********************************************************************************************************************
				Replacing $IMPORT_FUNCTION_CLASS, $IMPORT_GLOBALSINIT_CLASS, $OVERRIDE_STARTUPMETHOD in AndroidManifest.xml
			**********************************************************************************************************************	
		-->
		<if>
			<equals arg1="${nativecodegen}" arg2="true"/>
			<then>
				<property name="nativecode.pkg" value="com.konylabs.NativeCodeApp"/>
				<propertyregex property="nativecode.pkg.path" input="${nativecode.pkg}" regexp="\." replace="//"/>
				<mkdir dir="${app.dir}/src/${nativecode.pkg.path}"/>
				<copy todir="${app.dir}/src/${nativecode.pkg.path}" overwrite="true">
					<fileset dir="${android.nativedir}">
						<include name="*.java"/>
					</fileset>
				</copy>
				<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$IMPORT_FUNCTION_CLASS" value="import com.konylabs.vm.Function;" />
				<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$IMPORT_GLOBALSINIT_CLASS" value="import ${nativecode.pkg}.Globalsinit;" />
				<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$OVERRIDE_STARTUPMETHOD" value="
					//Donot remove this method. This method returns the startup method for Application. ${line.separator}
					public Function getStartupMethod(){${line.separator}
						return new Function(){${line.separator}

							public Object[] execute(Object[] arg0) throws Exception {${line.separator}
								Globalsinit.initializeApp(null);${line.separator}
								return null;${line.separator}
							}${line.separator}
			
						};${line.separator}
					}${line.separator}"/>
			</then>
			<else>
				<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$IMPORT_FUNCTION_CLASS" value="" />
				<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$OVERRIDE_STARTUPMETHOD" value="" />
				<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$IMPORT_GLOBALSINIT_CLASS" value="" />
			</else>
		</if>
		<if>
			<equals arg1= "${enablelocalnotifications}" arg2= "true"/>
			<then>

					<property name="localbroadcastreceiver.local" value="&quot;com.konylabs.notification.KonyLocalNotificationBroadcastReceiver&quot;"/>
					<if>
			        	<bool>
			        		<isgreaterthan arg1="${andtargetsdkkey}" arg2="30"/>
			        	</bool>
			        	<then>
			        		<var name="localbroadcastreceiver.local" value="${localbroadcastreceiver.local} android:exported=&quot;false&quot;"/>
		        		</then>
	        		</if>

					<property name="local_notification_permissions"
					value="
					&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;/&gt;${line.separator}
					&lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot;/&gt;"/>
					<property name="local_notification_intent_filter"
								value="&lt;intent-filter&gt;${line.separator}&lt;action android:name=&quot;${package}.LOCAL_MSG_VIEW&quot;/&gt;${line.separator}
										&lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;${line.separator}&lt;/intent-filter&gt;"/>

					<property name="local_notification_receiver"
								value="&lt;receiver android:name=${localbroadcastreceiver.local} &gt;${line.separator}
										&lt;intent-filter&gt;${line.separator}&lt;action android:name=&quot;${package}.localnotifications&quot; /&gt;${line.separator}&lt;category android:name=&quot;${package}&quot; /&gt;${line.separator}
										&lt;/intent-filter&gt;${line.separator}&lt;intent-filter&gt;${line.separator}&lt;action android:name=&quot;${package}.localnotificationclear&quot; /&gt;${line.separator}&lt;category android:name=&quot;${package}&quot; /&gt;${line.separator}
										&lt;/intent-filter&gt;${line.separator}&lt;intent-filter&gt;${line.separator}&lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;${line.separator}&lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;${line.separator}
										&lt;/intent-filter&gt;${line.separator}&lt;/receiver&gt;"/>
			</then>
			<else>
				<property name="local_notification_permissions" value=""/>
				<property name="local_notification_intent_filter" value=""/>
				<property name="local_notification_receiver" value=""/>
			</else>
		</if>
		<echo> LOCAL Notification Permissions: ${local_notification_permissions} </echo>
		<echo> LOCAL Notification Intent Filters: ${local_notification_intent_filter} </echo>
		<echo> LOCAL Notification Intent Receiver: ${local_notification_receiver} </echo>
		<replace file="${app.dir}/AndroidManifest.xml"
						token="$LOCAL_NOTIFICATION_PERMISSIONS"
						value="${local_notification_permissions}"
						/>
		<replace file="${app.dir}/AndroidManifest.xml"
						token="$LOCAL_NOTIFICATION_INTENTFILTER"
						value="${local_notification_intent_filter}"
						/>
		<replace file="${app.dir}/AndroidManifest.xml"
						token="$LOCAL_NOTIFICATION_RECEIVER"
						value="${local_notification_receiver}"
						/>

        <!-- if WatchBuild, add  <uses-feature android:name="android.hardware.type.watch" /> -->
          <if>
            <equals arg1="${isWatchBuild.Local}" arg2="true"/>
            <then>
            <replace file="${app.dir}/AndroidManifest.xml"
               token="$USES_FEATURE_WATCH"
			   value="&lt;uses-feature android:name=&quot;android.hardware.type.watch&quot;/&gt;"
               />
            </then>
            <else>
            <replace file="${app.dir}/AndroidManifest.xml"
                token="$USES_FEATURE_WATCH"
			    value=""
                />
            </else>
        </if>

		<!--COMPILE_SDK_VERSION -->

		<!--
		If user has selected a target SDK <=25 we hardcode the compileSdkVersion value to '25' because of appcompat dependecies.
		If user selects target SDK > 25 then that version will be set as compileSdkVersion.
		Note: User can still set Unsupported target/compile sdk versions using precompile,postcompile, prefix or suffix entries.
		-->

		<if>
			<bool>
				<isgreaterthan arg1= "${andtargetsdkkey}" arg2= "${android_compile_version}"/>
			</bool>
			<then>
					<property name="compilesdkversion" value="compileSdkVersion 'android-${andtargetsdkkey}'"/>
			</then>
			<else>
					<property name="compilesdkversion" value="compileSdkVersion  'android-${android_compile_version}'"/>
			</else>
		</if>
		<replace file="${app.dir}/build.gradle" token="$COMPILE_SDK_VERSION" value="${compilesdkversion}"/>
		<replace file="${app.dir}/build.gradle" token="$COMPILE_ANDROID_INTIAL_DEPENDENCIES" value="${dependencies}"/>
		<replace file="${app.dir}/build.gradle" token="$COMPILE_ANDROIDX_CORE" value="${dependencies_androidx_core}"/>
		<replace file="${app.dir}/build.gradle" token="$ANDROID_BUILD_TOOLS_VERSION" value="${build_tools_version}"/>
		<replace file="${app.dir}/build.gradle" token="$COMPILE_EXIF_INTERFACE" value="${dependencies_exifinterface}"/>
		<replace file="${app.dir}/gradle/wrapper/gradle-wrapper.properties" token="$GRADLEW_URL" value="${gradlew_url}"/>
		<replace file="${app.dir}/build.gradle" token="$COMPILE_KOTLIN_STDLIB" value="${dependencies_kotlin_stdlib}"/>
		<property name="httpclient_dependency" value="${dependencies_httpclient}" />
		<property name="httpcore_dependency" value="${dependencies_httpcore}" />

		<replace file="${app.dir}/build.gradle" token="$COMPILE_HTTP_CLIENT" value="${httpclient_dependency}"/>
		<replace file="${app.dir}/build.gradle" token="$COMPILE_HTTP_CORE" value="${httpcore_dependency}"/>
		<property name="androidx_appcompat_dependency" value="${dependencies_androidx_appcompat}" />
		<property name="androidx_activity_dependency" value="${dependencies_androidx_activity}" />
		<replace file="${app.dir}/build.gradle" token="$COMPILE_ANDROIDX_APPCOMPAT" value="${androidx_appcompat_dependency}"/>
		<replace file="${app.dir}/build.gradle" token="$COMPILE_ANDROIDX_ACTIVITY" value="${androidx_activity_dependency}"/>
		<if>
		<equals arg1="${enableLocalAuthentication}" arg2="true" />
		<then>
			<replace file="${app.dir}/build.gradle" token="$COMPILE_BIOMETRIC" value="${dependencies_biometric}"/>
			</then>
		<else>
			<replace file="${app.dir}/build.gradle" token="$COMPILE_BIOMETRIC" value=""/>
		</else>
		</if>

		<if>
		<equals arg1="${supportGooglePlayCoreLib}" arg2="true" />
		<then>
			<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_REVIEW" value="${dependencies_google_play_review}"/>
			<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_KOTLIN_REVIEW" value="${dependencies_google_play_Kotlin_review}"/>
			<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_APPUPDATE" value="${dependencies_google_play_appUpdate}"/>
			<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_KOTLIN_APPUPDATE" value="${dependencies_google_play_Kotlin_appUpdate}"/>
		</then>
		<else>
			<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_REVIEW" value=""/>
			<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_KOTLIN_REVIEW" value=""/>
			<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_APPUPDATE" value=""/>
			<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_KOTLIN_APPUPDATE" value=""/>
		</else>
		</if>

		<if>
		<equals arg1="${supportGoogleAutofillLib}" arg2="true" />
		<then>
			<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_AUTOFILL" value="${dependencies_google_autofill_version}"/>			
		</then>
		<else>
			<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_AUTOFILL" value=""/>
		</else>
		</if>
		
		<if>
		<equals arg1="${supportGooglePlayBaseLib}" arg2="true" />
		<then>
			<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_SERVICES_BASE" value="${dependencies_googleservices_base}"/>
		</then>
		<else>
			<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_SERVICES_BASE" value=""/>
		</else>
		</if>
		<!--MULTIDEX_SDK_VERSION -->

		<if>
		<available file="${app.dir}/project.properties"/>
		<then>
			<loadproperties srcfile="${app.dir}/project.properties"/>
			<if>
				<equals arg1="${multidexenable}" arg2="true"/>
				<then>
				<replace file="${app.dir}/build.gradle" token="$MULTIDEX_ENABLE" value="multiDexEnabled true"/>
				<replace file="${app.dir}/build.gradle" token="$COMPILE_MULTIDEX_VERSION" value="${multidex_dependency}"/>
				</then>
				<else>
				<replace file="${app.dir}/build.gradle" token="$MULTIDEX_ENABLE" value=""/>
				<replace file="${app.dir}/build.gradle" token="$COMPILE_MULTIDEX_VERSION" value=""/>
				</else>
			 </if>
		</then>
 		</if>

     <!-- check whether the build type is Watch , if so, add corresponding gradle dependencies related to Wear APi's  -->
        <if>
            <or>
            <equals arg1="${isWatchBuild.Local}" arg2="true"/>
            <equals arg1="${useWatchCommunicationApis}" arg2="true"/>
            <equals arg1="${addWatchBackgroundListenerToReceiveDataPayload}" arg2="true"/>
            <equals arg1="${addWatchBackgroundListenerToReceiveMessagePayload}" arg2="true"/>
            </or>
            <then>
                 <property name="googlePlayWearableVersion" value="${dependencies_google_play_wearable_version}"/>
				<if>
					<bool>
						<isgreaterthan arg1="${andminsdkkey}" arg2="22"/>
					</bool>
					<then>
						<property name="androidSupportWearableVersion" value="${dependencies_android_wear}"/>
						<property name="androidWearableWearableVersion" value="${dependencies_android_wear_remote}"/>
					</then>
					<else>
						<property name="androidWearableWearableVersion" value=""/>
						<property name="androidSupportWearableVersion" value=""/>
						<fail message="Error: To use the Android Wearable APIs, the minimum SDK version must be 23 (Android 6.0) or above. This limitation is from the Google, as some of these APIs require version 23 or higher."/>
					</else>
				</if>
            </then>
            <else>
            <property name="googlePlayWearableVersion" value="" />
            <property name="androidSupportWearableVersion" value="" />
			<property name="androidWearableWearableVersion" value=""/>
            </else>
        </if>
        <replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_WEARABLE" value="${googlePlayWearableVersion}"/>
        <replace file="${app.dir}/build.gradle" token="$COMPILE_ANDROID_SUPPORT_WEARABLE" value= "${androidSupportWearableVersion}"/>
		<replace file="${app.dir}/build.gradle" token="$COMPILE_ONLY_ANDROID_WEARABLE_WEARABLE" value= "${androidWearableWearableVersion}"/>

		<!-- Google Pay Configuration in gradle and Manifest file-->
		<echo>Google-Pay  :: ${KonyPay}</echo>
		<if>
            <equals arg1="${KonyPay}" arg2="true"/>
            <then>
                 <property name="googlePlayPayVersion" value="${dependencies_google_play_pay_version}"/>
				 <property name="googlePlayPayMetaData" value="&lt;meta-data android:name=&quot;com.google.android.gms.wallet.api.enabled&quot;
								  android:value=&quot;true&quot; /&gt;"/>
            </then>
            <else>
                 <property name="googlePlayPayVersion" value=""/>
				 <property name="googlePlayPayMetaData" value=""/>
            </else>
        </if>
		<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_PAY" value= "${googlePlayPayVersion}"/>
		<replace file="${app.dir}/AndroidManifest.xml" token="$Google_Play_Pay_META_DATA" value= "${googlePlayPayMetaData}"/>

		<!-- Replacing  ML ImageClassifier tokens in gradle file -->
		<echo>useMLImageClassifier  :: ${useMLImageClassifier}</echo>
		<if>
			<equals arg1="${useMLImageClassifier}" arg2="true" />
			<then>
				<property name="tensorflowLiteVersion" value="${dependencies_tensorflow_lite_version}" />
				<property name="tensorflowLiteGpuVersion" value="${dependencies_tensorflow_lite_gpu_version}" />
				<concat append="true" destfile="${app.dir}/build.gradle" fixlastline="yes">${line.separator}
					dependencies
					{
					android{
					aaptOptions {
					noCompress &quot;tflite&quot; }
					}
					}
				</concat>
			</then>
			<else>
				<property name="tensorflowLiteVersion" value="" />
				<property name="tensorflowLiteGpuVersion" value="" />
			</else>
		</if>
		<replace file="${app.dir}/build.gradle" token="$COMPILE_TENSORFLOWLITE_GPU" value= "${tensorflowLiteGpuVersion}"/>
		<replace file="${app.dir}/build.gradle" token="$COMPILE_TENSORFLOW_LITE" value= "${tensorflowLiteVersion}"/>

		<!-- PROXY SETTINGS-->

		<var name="httpproxyhost" value=""/>
		<var name="httpproxyport" value=""/>
		<var name="httpproxyuname" value=""/>
		<var name="httpproxypwd" value=""/>
		<var name="httpsproxyhost" value=""/>
		<var name="httpsproxyport" value=""/>
		<var name="httpsproxyuname" value=""/>
		<var name="httpsproxypwd" value=""/>

		<if>
		<not>
		<equals arg1="${kony.http.proxyHost}" arg2="$${kony.http.proxyHost}" />
		</not>
		<then>
			<var name="httpproxyhost" value="systemProp.http.proxyHost=${kony.http.proxyHost}"/>
			<var name="httpsproxyhost" value="systemProp.https.proxyHost=${kony.http.proxyHost}"/>
			<if>
			<not>
			<equals arg1="${kony.http.proxyPort}" arg2="$${kony.http.proxyPort}" />
			</not>
			<then>
				<var name="httpproxyport" value="systemProp.http.proxyPort=${kony.http.proxyPort}"/>
				<var name="httpsproxyport" value="systemProp.https.proxyPort=${kony.http.proxyPort}"/>
			</then>
			</if>
			<if>
			<not>
			<equals arg1="${kony.http.proxyUser}" arg2="$${kony.http.proxyUser}" />
			</not>
			<then>
				<var name="httpproxyuname" value="systemProp.http.proxyUser=${kony.http.proxyUser}"/>
				<var name="httpsproxyuname" value="systemProp.https.proxyUser=${kony.http.proxyUser}"/>
			</then>
			</if>
			<if>
			<not>
			<equals arg1="${kony.http.proxyPassword}" arg2="$${kony.http.proxyPassword}" />
			</not>
			<then>
				<var name="httpproxypwd" value="systemProp.http.proxyPassword=${kony.http.proxyPassword}"/>
				<var name="httpsproxypwd" value="systemProp.https.proxyPassword=${kony.http.proxyPassword}"/>
			</then>
			</if>
		</then>
		</if>
		<if>
			<equals arg1="${killGradleDaemon}" arg2="false" />
			<then>
				<replace file="${app.dir}/gradle.properties" token="org.gradle.daemon" value="# org.gradle.daemon"/>
				<concat fixlastline="yes" destfile="${app.dir}/gradle.properties" append="true">${line.separator}org.gradle.daemon=false${line.separator}</concat>
			</then>
		</if>
		<replace file="${app.dir}/gradle.properties" token="$HTTP_PROXY_HOST" value="${httpproxyhost}"/>
		<replace file="${app.dir}/gradle.properties" token="$HTTP_PROXY_PORT" value="${httpproxyport}"/>
		<replace file="${app.dir}/gradle.properties" token="$HTTP_PROXY_UNAME" value="${httpproxyuname}"/>
		<replace file="${app.dir}/gradle.properties" token="$HTTP_PROXY_PWD" value="${httpproxypwd}"/>
		<replace file="${app.dir}/gradle.properties" token="$HTTPS_PROXY_HOST" value="${httpsproxyhost}"/>
		<replace file="${app.dir}/gradle.properties" token="$HTTPS_PROXY_PORT" value="${httpsproxyport}"/>
		<replace file="${app.dir}/gradle.properties" token="$HTTPS_PROXY_UNAME" value="${httpsproxyuname}"/>
		<replace file="${app.dir}/gradle.properties" token="$HTTPS_PROXY_PWD" value="${httpsproxypwd}"/>

		<!-- ABI Filters-->
		<var name="SUPPORTED_ARCHITECTURES" value="@" />
		<if>
		<equals arg1="${support_arm_32bit}" arg2="true" />
			<then>
				<var name="SUPPORTED_ARCHITECTURES" value="'armeabi-v7a'" />
			</then>
		</if>
		<if>
		<equals arg1="${support_arm_64bit}" arg2="true" />
			<then>
				<var name="SUPPORTED_ARCHITECTURES" value="${SUPPORTED_ARCHITECTURES},'arm64-v8a'" />
					</then>
		</if>
				<if>
		<equals arg1="${support_x86_32bit}" arg2="true" />
					<then>
				<var name="SUPPORTED_ARCHITECTURES" value="${SUPPORTED_ARCHITECTURES},'x86'" />
					</then>
				</if>
				<if>
		<equals arg1="${support_x86_64bit}" arg2="true" />
					<then>
				<var name="SUPPORTED_ARCHITECTURES" value="${SUPPORTED_ARCHITECTURES},'x86_64'" />
			</then>
		</if>
		<!-- Gradle needs abi filters list as comma separated values. Build will fail if there is no value before/after comma. So to construct abi list as specified by gradle, we have taken the help of @ symbol.-->
		<propertyregex property="abifilters" input="${SUPPORTED_ARCHITECTURES}" regexp="@," replace="" defaultValue="${SUPPORTED_ARCHITECTURES}"/>
		<replace file="${app.dir}/build.gradle" token="$SUPPORTED_ARCHS" value="${abifilters}" />


		<if>
		<not>
		<equals arg1="${build_gradle_attrs_prefix}" arg2="$${build_gradle_attrs_prefix}" />
		</not>
		<then>
			<echo>build_gradle_attrs_prefix = ${build_gradle_attrs_prefix}</echo>
			<replace file="${app.dir}/build.gradle" token="$BUILD_GRADLE_PREFIX" value="${build_gradle_attrs_prefix}"/>
		</then>
		<else>
			<replace file="${app.dir}/build.gradle" token="$BUILD_GRADLE_PREFIX" value=""/>
		</else>
		</if>
		<if>
		<not>
		<equals arg1="${build_gradle_attrs_suffix}" arg2="$${build_gradle_attrs_suffix}" />
		</not>
		<then>
			<echo>build_gradle_attrs_suffix = ${build_gradle_attrs_suffix}</echo>
			<concat fixlastline="yes" destfile="${app.dir}/build.gradle" append="true">${line.separator}${build_gradle_attrs_suffix}</concat>
		</then>
		</if>
		<replace file="${app.dir}/build.gradle" token="$ANDROID_GRADLE_TOOLS_VERSION" value="${gradle_plugin_version}"/>
		<if>
		<not>
		<equals arg1="${gradle_properties_attrs}" arg2="$${gradle_properties_attrs}" />
		</not>
		<then>
			<echo>gradle_properties_attrs = ${gradle_properties_attrs}</echo>
			<concat fixlastline="yes" destfile="${app.dir}/gradle.properties" append="true">${line.separator}${gradle_properties_attrs}</concat>
		</then>
		</if>
		<if>
		<not>
		<equals arg1="${settings_gradle_attrs}" arg2="$${settings_gradle_attrs}" />
		</not>
		<then>
			<echo>gradle_properties_attrs = ${settings_gradle_attrs}</echo>
			<concat fixlastline="yes" destfile="${app.dir}/settings.gradle" append="true">${line.separator}${settings_gradle_attrs}</concat>
		</then>
		</if>
		<if>
			<equals arg1="${isFPbuild}" arg2="true"/>
			<then>
				<concat fixlastline="yes" destfile="${app.dir}/settings.gradle" append="true">
					include ':CordovaAssetsLib'
					include ":CordovaAssetsLib:"
					include ":CordovaAssetsLib:CordovaLib"
				</concat>
			</then>
		</if>
		<if>
			<equals arg1="${fileprovidersupport}" arg2="true" />
			<then>
				<copy file="${extres}/fileproviderpaths.xml" tofile="${app.dir}/res/xml/fileproviderpaths.xml" overwrite="true"/>
				<copy file="${extres}/fileproviderattr.xml" tofile="${app.dir}/res/values/fileproviderattr.xml" overwrite="true"/>
				<if>
					<equals arg1="${fileproviderpath}" arg2="$${fileproviderpath}" />
					<then>
						<replace file="${app.dir}/res/xml/fileproviderpaths.xml" token="$FILE_PROVIDER_PATH" value="/" />
						<replace file="${app.dir}/res/values/fileproviderattr.xml" token="$FILE_PROVIDER_PATH" value="" />
					</then>
					<else>
						<replace file="${app.dir}/res/xml/fileproviderpaths.xml" token="$FILE_PROVIDER_PATH" value="${fileproviderpath}" />
						<replace file="${app.dir}/res/values/fileproviderattr.xml" token="$FILE_PROVIDER_PATH" value="${fileproviderpath}" />
					</else>
				</if>
				<replace file="${app.dir}/AndroidManifest.xml" token="$LOCAL_FILE_PROVIDER"
						value="&lt;provider android:name=&quot;android.support.v4.content.FileProvider&quot;
									android:authorities=&quot;${package}&quot;
									android:exported=&quot;false&quot;
									android:grantUriPermissions=&quot;true&quot;&gt;
									&lt;meta-data
										android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;
										android:resource=&quot;@xml/fileproviderpaths&quot; /&gt;
								&lt;/provider&gt;" />
			</then>
			<else>
				<replace file="${app.dir}/AndroidManifest.xml" token="$LOCAL_FILE_PROVIDER" value="" />
			</else>
		</if>
		<!--In case of Studio Functional Preview, Cordova Project is maintained as Library  -->
		<if>
			<equals arg1="${isFPbuild}" arg2="true"/>
			<then>
				<replace file="${app.dir}/build.gradle" token="$COMPILE_CORDOVA_LIB" value="compile project(':CordovaAssetsLib')"/>
			</then>
		</if>
		<replace file="${app.dir}/res/values/pushconfig.xml" token="$PUSH_MESSAGE_ICON" value="${ApplicationId}_icon"/>
		<replace file="${app.dir}/res/values/pushconfig.xml" token="$PUSH_MESSAGE_NEW_REGISTRATION_ID_ICON" value="${ApplicationId}_icon"/>
		<replace file="${app.dir}/res/values/localnotificationconfig.xml" token="$LOCAL_NOTIFICATION_MSG_ICON" value="${ApplicationId}_icon"/>
	</target>

	<target name="addHuaweiMobileServicesEntries">
		<echo> useHuaweiMapAndLocationServices  :: ${useHuaweiMapAndLocationServices.local}</echo>
		<echo> useHuaweiPushService  :: ${useHuaweiPushService.local}</echo>
		<if>
			<or>
				<equals arg1="${useHuaweiMapAndLocationServices.local}" arg2="true" />
				<equals arg1="${useHuaweiPushService.local}" arg2="true" />
			</or>
			<then>				
				<replace file="${app.dir}/build.gradle" token="$CLASSPATH_HUAWEI_SERVICE_SERVICES" value="${classpath_huawei_services}"/>
				<replace file="${app.dir}/build.gradle" token="$APPLY_HUAWEI_PLUGIN" value="${apply_plugin_huawei_services}" />
				<replace file="${app.dir}/build.gradle" token="$COMPILE_HUAWEI_APP_GALLERY_CONNECT" value="${dependencies_huawei_app_gallery_connect}"/>
				<replace file="${app.dir}/build.gradle" token="$BUILD_SCRIPT_REPOSITORIES_HUAWEI_LOCATION" value="${repositories_Huawei_sdk}"/>
				<replace file="${app.dir}/build.gradle" token="$ALL_PROJECTS_REPOSITORIES_HUAWEI_LOCATION" value="${repositories_Huawei_sdk}"/>
				
				<if>
					<available file="${project.loc}/agconnect-services.json" />
					<then>
						<copy file="${project.loc}/agconnect-services.json" tofile="${app.dir}/agconnect-services.json" overwrite="true"/>
					</then>
					<else>
						<echo> agconnect-services.json file not found </echo>
					</else>
				</if>
			</then>
			<else>
				<replace file="${app.dir}/build.gradle" token="$CLASSPATH_HUAWEI_SERVICE_SERVICES" value=""/>
				<replace file="${app.dir}/build.gradle" token="$APPLY_HUAWEI_PLUGIN" value="" />
				<replace file="${app.dir}/build.gradle" token="$COMPILE_HUAWEI_APP_GALLERY_CONNECT" value=""/>
				<replace file="${app.dir}/build.gradle" token="$BUILD_SCRIPT_REPOSITORIES_HUAWEI_LOCATION" value=""/>
				<replace file="${app.dir}/build.gradle" token="$ALL_PROJECTS_REPOSITORIES_HUAWEI_LOCATION" value=""/>					
			</else>
		</if>

		<if>
			<equals arg1="${useHuaweiMapAndLocationServices.local}" arg2="true" />
			<then>
			<copy file="${extres}/huaweimap.xml" tofile="${app.dir}/res/layout/huaweimap.xml" overwrite="true"/>
				<replace file="${app.dir}/build.gradle" token="$COMPILE_HUAWEI_LOCATION" value="${dependencies_huawei_location_kit}"/> 
				<replace file="${app.dir}/build.gradle" token="$COMPILE_HUAWEI_MAP" value="${dependencies_huawei_map_kit}"/> 
			</then>
			<else>
				<replace file="${app.dir}/build.gradle" token="$COMPILE_HUAWEI_LOCATION" value=""/>
			 	<replace file="${app.dir}/build.gradle" token="$COMPILE_HUAWEI_MAP" value=""/> 
				<delete file="${app.dir}/res/layout/huaweimap.xml"/>		
			</else>
		</if>
		
		<if>
			<equals arg1="${useHuaweiPushService.local}" arg2="true" />
			<then>
				<replace file="${app.dir}/build.gradle" token="$COMPILE_HUAWEI_PUSH_KIT" value="${dependencies_huawei_push_kit}"/>
                <condition property="customhmspushservice.flag">
                    <and>
						<length string="${customHuaweiPushService.local}" trim="true" when="greater" length="0" />
                    </and>
                </condition>
				<if>
					<equals arg1="${customhmspushservice.flag}" arg2="true" />
					<then>
						<property name="customhmspushservice.local" value="${customHuaweiPushService.local}" />
					</then>
					<else>
						<property name="customhmspushservice.local" value="com.konylabs.huawei.pushkit.KonyHuaweiPushService" />
					</else>
				</if>
				 <property name="hms_push_service" value="&lt;service android:name=&quot;${customhmspushservice.local}&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;com.huawei.push.action.MESSAGING_EVENT&quot;/&gt; &lt;/intent-filter&gt; &lt;/service&gt;" />
			</then>
			<else>
				<replace file="${app.dir}/build.gradle" token="$COMPILE_HUAWEI_PUSH_KIT" value=""/>
				<property name="customhmspushservice.local" value="" />
				<property name="hms_push_service" value="" />
			</else>			
		</if>
		<replace file="${app.dir}/AndroidManifest.xml" token="$HUAWEI_PUSH_SERVICE" value="${hms_push_service}" />
	</target>		
	
	<target name="addGoogleMapEntries">	
		<delete file="${app.dir}/res/layout/mapv2.xml"/>

		<!--
			******************************************************************************************
			set mapv2keyadded property to true, if MAPV2_KEY entry already exists in andapplicationtags of AndroidManifest.xml
				else false
			******************************************************************************************	
		-->
		<condition property="mapv2keyadded" value="true" else="false">
		    <matches pattern="com.google.android.maps.v2.API_KEY" string="${andapplicationtags}"/>
		</condition>

		<!--
			******************************************************************************************
			set googlemapv2keyadded property to true, if user has given MAPV2_KEY in IDE MAP V2 Key Entry Option
				else false
			******************************************************************************************	
		-->
		<condition property="googlemapv2keyadded" value="false" else="true">
		<or>
			<equals arg1="${googlemapv2key}" arg2="$${googlemapv2key}"/>
			<equals arg1="${googlemapv2key}" arg2="" />
		</or>
		</condition>
		<if>
			<and>
				<equals arg1="${googlemapv2keyadded}" arg2="false"/>
				<equals arg1="${mapv2keyadded}" arg2="false" />
			</and>
			<then>
				<echo message="The value of googlemapv2key is empty" />
				<if>
					<equals arg1="${usesmaps}" arg2="true"/>
					<then>
						<!--
						When Map is dragged and dropped in IDE we get usesmaps true.
						If user didn't give any mapv2 key either in IDE MAP V2 Key Entry Option or through Manifest tag entries,
						we add Dummy Google Map V2 key such that app will not crash at runtime when Map is accessed.
						Note:
						Map will still crash if user adds map dynamically through code and don't add 
						Mapv2 key through any of IDE MAP V2 Key Entry Option or through Manifest tag entries.
						As we have no way to determine if Map is dynamically created and we can't add dummy key.						
						-->
						<var name="mapv2_key" value="&lt;meta-data android:name=&quot;com.google.android.maps.v2.API_KEY&quot; android:value=&quot;dummy_key&quot;/&gt;${line.separator}
						&lt;meta-data android:name=&quot;com.google.android.gms.version&quot; 
						android:value=&quot;@integer/google_play_services_version&quot;/&gt;"/>
					</then>
					<else>
						<!--Remove the place holders in AndroidManifest.xml -->
						<var name="mapv2_key" value=""/>
						<var name="mapv2_permissions" value=""/>
					</else>
				</if>
			</then>
			<else>
				<if>
					<and>
						<equals arg1="${googlemapv2keyadded}" arg2="true"/>
						<equals arg1="${mapv2keyadded}" arg2="true" />
					</and>
					<then>
						<fail message="Duplicate maps.v2.API_KEY found in Android Manifest application tag child entries and Application Properties.Please retain only one maps.v2.API_KEY."/>
					</then>
				</if>
				<if>
					<equals arg1="${mapv2keyadded}" arg2="true"/>
					<then>
						<echo message="mapv2keyadded in application tags = ${mapv2keyadded}"/>
						<var name="mapv2_key" value="${line.separator}&lt;meta-data android:name=&quot;com.google.android.gms.version&quot; 
						android:value=&quot;@integer/google_play_services_version&quot;/&gt;"/>
					</then>
					<else>
						<echo message="The value of googlemapv2key in project properties is ${googlemapv2key}" />
						<var name="mapv2_key" value="&lt;meta-data android:name=&quot;com.google.android.maps.v2.API_KEY&quot; android:value=&quot;${googlemapv2key}&quot;/&gt;${line.separator}
						&lt;meta-data android:name=&quot;com.google.android.gms.version&quot; 
						android:value=&quot;@integer/google_play_services_version&quot;/&gt;
						"/>
					</else>
				</if>
			</else>
		</if>
		<if>
			<or>
				<equals arg1="${mapv2keyadded}" arg2="true"/>
				<equals arg1="${googlemapv2keyadded}" arg2="true" />
				<equals arg1="${usesmaps}" arg2="true"/>
			</or>
			<then>
				<copy file="${extres}/mapv2.xml" tofile="${app.dir}/res/layout/mapv2.xml" overwrite="true"/>
				<ant antfile="${currentfile}" target="add-googleplayservices-gradle-dependencies">
					<property name="libtype" value="map"/>
				</ant>
				<var name="mapv2_permissions"
							value="&lt;permission android:name=&quot;${package}.permission.MAPS_RECEIVE&quot; android:protectionLevel=&quot;signature&quot;/&gt;${line.separator}
							&lt;uses-permission android:name=&quot;${package}.permission.MAPS_RECEIVE&quot;/&gt;${line.separator}
							&lt;uses-permission android:name=&quot;com.google.android.providers.gsf.permission.READ_GSERVICES&quot;/&gt;${line.separator}
							&lt;uses-feature android:glEsVersion=&quot;0x00020000&quot;/&gt;"/>
			</then>
		</if>
		<echo> MapV2 Metadata-Key: ${mapv2_key} </echo>
		<echo> MapV2 Permissions: ${mapv2_permissions} </echo>
		<replace file="${app.dir}/AndroidManifest.xml" token="$MAPV2_KEY" value="${mapv2_key}" />
		<replace file="${app.dir}/AndroidManifest.xml" token="$MAPV2_PERMISSIONS" value="${mapv2_permissions}" />
	</target>

	<target name="copy-PaaS-resources">
		<delete dir="${app.dir}/src/com/konylabs/js/appsrc"/>
		<available file="${extres}/paas/license.js" type="file" property="extres.paas.license"/>
		<if>
    		<equals arg1="${extres.paas.license}" arg2="true"/>
    		<then>
				<loadfile property="appsrc" srcFile="${extres}/paas/license.js"/>
				<!-- Check if file is empty -->
				<if>
					<equals arg1="${appsrc}" arg2="$${appsrc}"/>
					<then>
						<property name="escjssrc" value=""/>
					</then>
					<else>
						<escapejssource property="escjssrc" appSource="${appsrc}" />
					</else>
				</if>
				<mkdir dir="${app.dir}/src/com/konylabs/js/appsrc" />
				<copy file="${extres}/JSSourceFileTemplate.java" tofile="${app.dir}/src/com/konylabs/js/appsrc/PaaSLicenseSource.java" overwrite="true" />
				<replace file="${app.dir}/src/com/konylabs/js/appsrc/PaaSLicenseSource.java" token="$SourceFileName" value="PaaSLicenseSource"/>
				<replace file="${app.dir}/src/com/konylabs/js/appsrc/PaaSLicenseSource.java" token="$JSSource" value="${escjssrc}"/>
			</then>
		</if>
	</target>

	<target name="copy-VideoWidget-resources">
		<available file="${extres}/voltmxVideoWidget.js" type="file" property="extres.videowidget"/>
		<if>
    		<equals arg1="${extres.videowidget}" arg2="true"/>
    		<then>
				<loadfile property="videowidgetsrc" srcFile="${extres}/voltmxVideoWidget.js"/>
				<!-- Check if file is empty -->
				<if>
					<equals arg1="${videowidgetsrc}" arg2="$${videowidgetsrc}"/>
					<then>
						<property name="escvideowidgetsrc" value=""/>
					</then>
					<else>
						<escapejssource property="escvideowidgetsrc" appSource="${videowidgetsrc}" />
					</else>
				</if>
				<mkdir dir="${app.dir}/src/com/konylabs/js/appsrc" />
				<copy file="${extres}/JSSourceFileTemplate.java" tofile="${app.dir}/src/com/konylabs/js/appsrc/KonyVideoWidget.java" overwrite="true" />
				<replace file="${app.dir}/src/com/konylabs/js/appsrc/KonyVideoWidget.java" token="$SourceFileName" value="KonyVideoWidget"/>
				<replace file="${app.dir}/src/com/konylabs/js/appsrc/KonyVideoWidget.java" token="$JSSource" value="${escvideowidgetsrc}"/>
			</then>
		</if>
	</target>

	<target name="copyassets">
        <echo>Copying the resources to android assets</echo>
		<if>
			<equals arg1="${isFPbuild}" arg2="true"/>
			<then>
		<concat fixlastline="yes" destfile="${assets.dir}/application.properties" append="true">
			UseSQLCipherFIPS : false
			UseCryptoLibrary : false
			EnableJSBindings : true
		</concat>
			</then>
			<else>
				<if>
					<equals arg1="${splash.image}" arg2="$${splash.image}"/>
					<then>
						<property name="splashScreenImg" value=""/>
					</then>
					<else>
						<property name="splashScreenImg" value="${splash.image}"/>
						<!-- copy file="${resfolder}/build/${splash.image}" tofile="${app.dir}/res/drawable/${splash.image}" overwrite="true"/-->
					</else>
				</if>
				<copy file="application.properties" tofile="${assets.dir}/application.properties" overwrite="true"/>
				<tstamp>
					<format property="currenttime" pattern="yyyyMMddHHmmss"/>
				</tstamp>
				<concat fixlastline="yes" destfile="${assets.dir}/application.properties" append="true">
					Splash-FG: ${splash.fgcolor}
					Splash-BG: ${splash.bgcolor}
					Splash-LI: ${splash.li}
					Splash-IMG: ${splashScreenImg}
					Splash-ANIM-DURATION: ${splash.animation.duration}
					Splash-ANIM-IMGLIST: ${splash.animation.images}
					Splash-VIDEO: ${splash.video}
					Splash-VIDEO-INTERRUPTIBLE: ${splash.video.interruptable}
					Splash-ORIENTATION : ${splash.orientation}
					BUILD: ${build.option.local}
					DevLang : ${dev.language}
					Var:${currenttime}
					EnableIdForAutomation : ${enableIdForAutomation}
					DisableApplicationScreenshot : ${DisableApplicationScreenshot}
					isUniversalApp : ${isUniversalApp}
					UseSQLCipherFIPS : ${UseSQLCipherFIPS}
					UseCryptoLibrary : ${UseOpenSSLLibrary}
				</concat>
				<echo>DefaultLocale = ${DefaultLocale}</echo>
				<if>
					<not>
						  <equals arg1="${DefaultLocale}" arg2="$${DefaultLocale}"/>
					</not>
					<then>
				<concat  destfile="${assets.dir}/application.properties" append="true">
					DefaultLocale:${DefaultLocale}
				</concat>
					</then>
				</if> 
				<if>
					<equals arg1="${EnableVulkan}" arg2="true"/>
					<then>
						<concat destfile="${assets.dir}/application.properties" append="true">
							EnableVulkan : ${EnableVulkan}
						</concat>
					</then>				
				</if>				
				<if>
					<not>
						<equals arg1="${showVoltmxSplashScreen}" arg2="$${showVoltmxSplashScreen}"/>
					</not>
					<then>
						<concat destfile="${assets.dir}/application.properties" append="true">
							showVoltmxSplashScreen : ${showVoltmxSplashScreen}
						</concat>

					</then>
				</if>
				<if>
					<not>
						<equals arg1="${continueNativeSplashScreen}" arg2="$${continueNativeSplashScreen}"/>
					</not>
					<then>
						<concat destfile="${assets.dir}/application.properties" append="true">
							continueNativeSplashScreen : ${continueNativeSplashScreen}
						</concat>

					</then>
				</if>
				<if>
					<not>
						<equals arg1="${splashScreenExitAnimation}" arg2="$${splashScreenExitAnimation}"/>
					</not>
					<then>
						<concat destfile="${assets.dir}/application.properties" append="true">
							splashScreenExitAnimation : ${splashScreenExitAnimation}
						</concat>
					</then>
				</if>
				<if>
					<equals arg1="${enableJSBindings}" arg2="true"/>
					<then>
				<concat destfile="${assets.dir}/application.properties" append="true">
					EnableJSBindings : ${enableJSBindings}
				</concat>
					</then>
					<else>
				<concat destfile="${assets.dir}/application.properties" append="true">
					EnableJSBindings : ${enableMobileFirstAPIs}
				</concat>
					</else>
				</if>
				<if>
					<equals arg1="${automationEnabled}" arg2="true"/>
					<then>
						<concat destfile="${assets.dir}/application.properties" append="true">
							AutomationEnabled : ${automationEnabled}
						</concat>
												
						<if>
							<not>
				            	<equals arg1="${wsport}" arg2=""/>
				        	</not>						
							<then>
								<concat destfile="${assets.dir}/application.properties" append="true">
									wsport : ${wsport}
								</concat>
							</then>
						</if>
					</then>
				</if>
				<if>
					<not>
						<equals arg1="${patchSecurityProvider}" arg2="$${patchSecurityProvider}"/>
					</not>
					<then>
						<concat  destfile="${assets.dir}/application.properties" append="true">
							patchSecurityProvider:${patchSecurityProvider}
						</concat>
					</then>
				</if>
				<if>
				    <not>
						<equals arg1="${enableAllSupportedProtocolsAndCiphersAfterProviderUpdate}" arg2="$${enableAllSupportedProtocolsAndCiphersAfterProviderUpdate}" />
					</not>
					<then>
						<concat  destfile="${assets.dir}/application.properties" append="true">
						enableAllSupportedProtocolsAndCiphersAfterProviderUpdate:${enableAllSupportedProtocolsAndCiphersAfterProviderUpdate}
						</concat>
					</then>
				</if>
				<if>
				    <not>
						<equals arg1="${enableAllSupportedProtocolsAndCiphers}" arg2="$${enableAllSupportedProtocolsAndCiphers}" />
					</not>
					<then>
						<concat  destfile="${assets.dir}/application.properties" append="true">
						enableAllSupportedProtocolsAndCiphers:${enableAllSupportedProtocolsAndCiphers}
						</concat>
					</then>
				</if>
				<if>
					<not>
						<equals arg1="${EnableBox2FlexConversion}" arg2="$${EnableBox2FlexConversion}"/>
					</not>
					<then>
						<concat  destfile="${assets.dir}/application.properties" append="true">
							EnableBox2FlexConversion:${EnableBox2FlexConversion}
						</concat>
					</then>
				</if>
				<!-- Not needed in "androidtabletplugin" repo as this property is for universal build only-->
				<if>
					<not>
						<equals arg1="${tabletBreakPointInInches}" arg2="$${tabletBreakPointInInches}"/>
					</not>
					<then>
						<concat  destfile="${assets.dir}/application.properties" append="true">
							tabletBreakPointInInches:${tabletBreakPointInInches}
						</concat>
					</then>
				</if>
				<replace file="${assets.dir}/application.properties" token="^(App-URL.+$)" value="App-URL=http://${machineip}:${jetty.portnum}/${appid}r/s" />
			</else>
		</if>
		<if>
			<equals arg1="${useExternalBouncyCastleLibrary}" arg2="true"/>
			<then>
				<concat destfile="${assets.dir}/application.properties" append="true">
					useExternalBouncyCastleLibrary : ${useExternalBouncyCastleLibrary}
				</concat>	
			</then>
		 </if>
		<concat fixlastline="yes" destfile="${assets.dir}/application.properties" append="true">
			AppMode : ${hybridmode}
			EnableActionBar : ${actionbar}
			NetworkTrustConfig : ${networktrustconfig}
			UseGooglePlayLocationServices : ${usegoogleplaylocationservices.local}
			PushNotificationType : ${push_notification_type.local}
			splashOrientationClassifier : ${splashOrientationClassifier.local}
			AppID: ${appid}
		</concat>

		<ant antfile="${currentfile}" target="writeMainActivityFullNameToAppPropertiesFile"/>

		<if>
			<equals arg1="${addAPKTamperProtection}" arg2="true" />
			<then>
				<propertyfile file="${assets.dir}/application.properties">
					<entry key="ATP" value="true"/>
				</propertyfile>
				<propertyfile file="${assets.dir}/additional.properties">
					<entry key="SKV" value="true"/>
				</propertyfile>
			</then>
			<else>
				<propertyfile file="${assets.dir}/additional.properties">
					<entry key="SKV" value="false"/>
				</propertyfile>
			</else>
		</if>
		<!--Wear is not supported in Function Preview -->
		<if>
			<equals arg1="${isFPbuild}" arg2="false"/>
			<then>
				<available file="pluginversions.properties" type="file" property="pluginversions.properties.present" />
				<if>
					<equals arg1="${pluginversions.properties.present}" arg2="true" />
					<then>
						<copy file="pluginversions.properties" tofile="${assets.dir}/pluginversions.properties" overwrite="true" failonerror="false"/>
					 <if>
						<equals arg1="${isWatchBuild.Local}" arg2="true"/>
						 <then>
								<concat fixlastline="yes" destfile="${assets.dir}/pluginversions.properties" append="true">TargetBuild=Watch</concat>
						 </then>
						 <else>
								<concat fixlastline="yes" destfile="${assets.dir}/pluginversions.properties" append="true">TargetBuild=Mobile</concat>
						 </else>
					</if>
					<loadproperties srcFile="${extres}/pluginlabel.txt"/>
					<concat fixlastline="yes" destfile="${assets.dir}/pluginversions.properties" append="true">${line.separator}plugin_mode=${plugin_mode}</concat>
				</then>
				</if>
				<available file="${i18n.android.properties}" type="dir" property="locales.present" />
				<if>
					<equals arg1="${locales.present}" arg2="true" />
					<then>
						<copy todir="${assets.dir}" overwrite="true">
							<fileset dir="${i18n.android.properties}" includes="*.prop"/>
						</copy>
						<if>
							<or>
							<equals arg1="${hybridmode}" arg2="wrapper"/>
							<equals arg1="${hybridmode}" arg2="mixed"/>
							</or>
							<then>
								<mkdir dir="${assets.dir}/web"/>
								<mkdir dir="${assets.dir}/web/resources"/>
								<mkdir dir="${assets.dir}/web/resources/strings"/>
								<copy todir="${assets.dir}/web/resources/strings" overwrite="true">
									<fileset dir="${resfolder}/i18n/iphone_properties" includes="*.prop"/>
									<mapper type="glob" from="*.prop" to="*.js"/>
								</copy>
								<replaceregexp match="(.*)" replace="var i18nObject = {\1}" flags="s" byline="false">
									<fileset dir="${assets.dir}/web/resources/strings" includes="*.js"/>
								</replaceregexp>
								<replace dir="${assets.dir}/web/resources/strings">
									<include name="*.js"/>
									<replacefilter token="&quot;=&quot;" value="&quot;:&quot;"/>
									<replacefilter token="&quot;;" value="&quot;,"/>
								</replace>
							</then>
						</if>
					</then>
				</if>
				<if>
					<equals arg1="${dev.language}" arg2="js"/>
					<then>
							<if>
								<equals arg1="${build.option}" arg2="debug"/>
								<then>
									<ant antfile="${currentfile}" target="copy-PaaS-resources"/>
									<!-- Create secure source for VideoWidget file -->
									<if>
										<equals arg1="${usesvideo}" arg2="true"/>
										<then>
											<ant antfile="${currentfile}" target="copy-VideoWidget-resources"/>
										</then>
									</if>
								</then>
							</if>
						   <ant dir="." antfile="build-jssource.xml" inheritAll="true">
								<property name="app.dir" value="${app.dir}"/>
								<property name="assets.dir" value="${assets.dir}"/>
								<property name="jssrc.dir" value="${jssrc.dir}"/>
								<property name="packagepath" value="${packagepath}"/>
								<property name="secureappsource" value="true"/>
								<property name="platform.lib.metrics.thirdparty" value="${platform.lib.metrics.thirdparty}"/>
								<property name="usesvideo" value="${usesvideo}"/>
								<property name="enablecordova" value="${enableCordova}"/>
								<property name="cordovabuildmode" value="${cordovabuildmode}"/>
							</ant>
					</then>

				</if>
				<if>
					<equals arg1="${locales}" arg2="" />
					<then>
						<property name="langlocales.present" value="false"/>
					</then>
					<else>
						<property name="langlocales.present" value="true"/>
					</else>
				</if>
				<if>
					<and>
						<equals arg1="${common.present}" arg2="true"/>
						<equals arg1="${langlocales.present}" arg2="true"/>
					</and>
					<then>
						<for list="${locales}" param="letter">
							<sequential>
								<propertyregex property="folderval" override="true"
									  input="@{letter}"
									  regexp="([^\.]*)\_([^\.]*)"
									  replace="drawable-\1-r\2"
									  casesensitive="false" />
								<if>
									<equals arg1="${folderval}" arg2="$${folderval}"/>
									<then>
										<property name="folderval" value="drawable-@{letter}"/>
									</then>
								</if>
								<copy todir="${app.dir}/res/${folderval}" overwrite="true">
									<fileset dir="${resfolder}/${resources.common.folder}/@{letter}" includes="**/**"/>
								</copy>
							</sequential>
						</for>
					</then>
				</if>
				<available file="${resfolder}/fonts" type="dir" property="fonts.present"/>
				<mkdir dir="${assets.dir}/fonts"/>
				<if>
					<equals arg1="${fonts.present}" arg2="true"/>
					<then>
						<copy todir="${assets.dir}/fonts" overwrite="true">
							<fileset dir="${resfolder}/fonts" includes="*.ttf, *.ttc, *.otf, *.xml"/>
						</copy>
					</then>
				</if>
				<if>
					<equals arg1="${platform.folder}" arg2="$${platform.folder}"/>
					<then>
						 <if>
							   <equals arg1="${isWatchBuild.Local}" arg2="true"/>
							   <then>
									  <property name="platform.folder" value="androidwearos"/>
								   </then>
								   <else>
									 <property name="platform.folder" value="android"/>
								   </else>
							   </if>
					</then>
				 </if>
				<available file="${resfolder}/fonts/${resource.font.folder}" type="dir" property="androidfonts.present"/>
				<if>
					<equals arg1="${androidfonts.present}" arg2="true"/>
					<then>
						<copy todir="${assets.dir}/fonts" overwrite="true">
							<fileset dir="${resfolder}/fonts/${resource.font.folder}" includes="*.*"/>
						</copy>
					</then>
				</if>
				<available file="${appfolder}/${outputdir}/${codedir}/themes/${platform.folder}" type="dir" property="androidthemes.present"/>
				<if>
					<equals arg1="${androidthemes.present}" arg2="true"/>
					<then>
						<echo>Copying theme files</echo>
						<copy todir="${assets.dir}" overwrite="true">
							<fileset dir="${appfolder}/${outputdir}/${codedir}/themes/${platform.folder}" includes="*.theme"/>
						</copy>
					</then>
				</if>
				<!--Copying App icon images -->
				<available file="${resfolder}/build" type="dir" property="builddir.present"/>
				<if>
					<equals arg1="${builddir.present}" arg2="true"/>
					<then>
						<!--Copying App icon images -->
						<copy todir="${assets.dir}" overwrite="true">
							<fileset dir="${resfolder}/build" includes="*.*"/>
						</copy>
					</then>
				</if>
			</then>
		</if>

		<echo>hybridmode..........${hybridmode}</echo>
		<if>
			<equals arg1="${hybridmode}" arg2="native"/>
			<then>
				<ant antfile="${currentfile}"  target="copynativeresources"/>
				<ant antfile="${currentfile}"  target="copyninepatchimages"/>
			</then>
		<else>
			<if>
				<equals arg1="${hybridmode}" arg2="wrapper"/>
				<then>
					<ant antfile="${currentfile}"  target="copy-spa-resources"/>
					<ant antfile="${currentfile}"  target="copysplashresources"/>
				</then>
			<else>
				<if>
					<equals arg1="${hybridmode}" arg2="mixed"/>
					<then>
						<ant antfile="${currentfile}"  target="copynativeresources"/>
						<ant antfile="${currentfile}"  target="copy-spa-resources"/>
						<ant antfile="${currentfile}"  target="copyninepatchimages"/>
					</then>
				</if>
			</else>
			</if>
		</else>
		</if>

		<if>
			<equals arg1="${isFPbuild}" arg2="false"/>
			<then>

				<if>
					<not>
						  <equals arg1="${logo}" arg2=""/>
					</not>
					<then>
						<echo>Copying icon file ${logo} </echo>
						<if>
							<not>
							<equals arg1="${ismipmapicon}" arg2="true"/>
							</not>
							<then>
								<ant antfile="${currentfile}"  target="renamelaunchericon">
									<property name="iconname" value="${logo}"/>
								</ant>
							</then>
						</if>
					</then>
					<else>
						<ant antfile="${currentfile}"  target="renamelaunchericon">
							<property name="iconname" value="icon.png"/>
						</ant>
					</else>
				</if>
				</then>
				<else>
					<ant antfile="${currentfile}"  target="renamelaunchericon">
						<property name="iconname" value="icon.png"/>
					</ant>
				</else>
		</if>

    	<available file="${customlibs.dir}/${platform.folder}" type="dir" property="libraries.dir.available"/>
    	<if>
	    	<!--Copying 3rd party libraries -->
			<equals arg1="${libraries.dir.available}" arg2="true"/>
    		<then>
    			<echo>Copying third party libraries</echo>
				<copy todir="${libs.dir}" overwrite="true" >
					<fileset dir="${customlibs.dir}/${platform.folder}" includes="**/*.*"/>
				</copy>
			</then>
			<else>
				<echo message="No 3rd party libraries found"></echo>
			</else>
    	</if>
		<!-- Done: Copying 3rd party libraries  -->
		<!-- Copying wrapper classes to src folder-->
		<available file="${customlibs.src.dir}/${platform.folder}" type="dir" property="ffi.dir.available"/>
		<if>
			<equals arg1="${ffi.dir.available}" arg2="true"/>
			<then>
				<echo message="Copying ffi templates to src folder"/>
				<copy todir="${src.dir}" overwrite="true">
					<fileset dir="${customlibs.src.dir}/${platform.folder}" includes="**/*.*"/>
				</copy>
			</then>
		</if>
		<!-- Done: Copying wrapper classes to src folder-->

		<!--Copying custom widget libraries -->
		<available file="${customwidgets.dir}/${platform.folder}" type="dir" property="cwlibs.dir.available"/>
    	<if>
			<equals arg1="${cwlibs.dir.available}" arg2="true"/>
    		<then>
    			<echo>Copying third party libraries</echo>
				<copy todir="${libs.dir}" overwrite="true" >
					<fileset dir="${customwidgets.dir}/${platform.folder}" includes="*.*"/>
				</copy>
			</then>
			<else>
				<echo message="No custom widget libraries found"></echo>
			</else>
    	</if>
		<!-- Done: Copying custom widget libraries  -->
		<!-- Copying custom widget classes to src folder-->
		<available file="${customwidgets.src.dir}/${platform.folder}" type="dir" property="cwsrc.dir.available"/>
		<if>
			<equals arg1="${cwsrc.dir.available}" arg2="true"/>
			<then>
				<echo message="Copying custom widget templates to src folder"/>
				<copy todir="${src.dir}" overwrite="true">
					<fileset dir="${customwidgets.src.dir}/${platform.folder}" includes="**/*.*"/>
				</copy>
			</then>
		</if>
		<!-- Done: Copying custom widget src files -->
    	<mkdir dir="${libs.dir}"/>
		<echo>thirdparty dir::::${thirdparty.libs.dir} </echo>
		<if>
			<and>
				<not>
					<equals arg1="${thirdparty.libs.dir}" arg2="$${thirdparty.libs.dir}"/>
				</not>
				<not>
					<equals arg1="${thirdparty.libs.dir}" arg2=""/>
				</not>
			</and>
			<then>
				<for param="libzip" list="${thirdparty.libs.dir}" delimiter=",">
					<sequential>
						<if>
							<available file="@{libzip}" type="file" />
							<then>
								<echo>unziping zip file::::@{libzip} </echo>
								<unzip src="@{libzip}" dest="${libs.dir}">
									<mapper type="flatten" />
									<patternset>
										<include name="**/*.jar"/>
										<include name="**/*.aar"/>
									</patternset>
								</unzip>
							</then>
						</if>
					</sequential>
					</for>
			</then>
		</if>
		<if>
			<equals arg1= "${enableIdForAutomation}" arg2= "false"/>
			<then>
				<delete file="${app.dir}/res/values/widgetids.xml"/>
				<delete file="${app.dir}/res/values/dynamicwidgetids.xml"/>
			</then>
		</if>
    </target>

	<target name="copynativeresources">
	<property name="rawFolderFiles" value="*.mp4 *.mov *.avi *.mjpeg *.m4v *.cer"/>
	<if>
		<equals arg1="${isFPbuild}" arg2="false"/>
		<then>
			<property name="isoverwrite" value="true"/>
		</then>
		<else>
			<property name="isoverwrite" value="false"/>
		</else>
	</if>
        <echo>Copying the native resources to android assets</echo>
	 <if>
         <not>
              <equals arg1="${isWatchBuild.Local}" arg2="true"/>
         </not>
         <then>
    	<available file="${resfolder}/${resources.common.folder}" type="dir" property="common.present"/>
    	<if>
    		<equals arg1="${common.present}" arg2="true"/>
    		<then>
    	        <copy todir="${app.dir}/res/drawable" overwrite="${isoverwrite}" preservelastmodified="true">
    	            <fileset dir="${resfolder}/${resources.common.folder}" includes="*.png, *.9.png, *.jpg, *.gif,*.xml"  excludes="${rawFolderFiles}"/>
    	        </copy>
				<copy todir="${app.dir}/res/raw" overwrite="${isoverwrite}" preservelastmodified="true">
    	            <fileset dir="${resfolder}/${resources.common.folder}" includes="${rawFolderFiles}"/>
    	        </copy>
				<copy todir="${app.dir}/res/raw" overwrite="${isoverwrite}" preservelastmodified="true" failonerror="false">
    	            <fileset dir="${resfolder}/${resources.common.folder}/videos" includes="${rawFolderFiles}"/>
    	        </copy>
				<copy todir="${app.dir}/res" overwrite="${isoverwrite}" preservelastmodified="true">
			        <fileset dir="${resfolder}/${resources.category.common.folder}" includes="raw*/*"/>
    	        </copy>
    		</then>
    		<else>
    	        <copy todir="${app.dir}/res/drawable" overwrite="${isoverwrite}" preservelastmodified="true">
    	            <fileset dir="${resfolder}" includes="*.*" excludes="*.ttf *.otf"/>
    	        </copy>
    		</else>
    	</if>
		</then>
      </if>
		<available file="${resfolder}/${resources.category.common.folder}" type="dir" property="category.common.present"/>
    	<if>
    		<equals arg1="${category.common.present}" arg2="true"/>
    		<then>
    	        <copy todir="${app.dir}/res/drawable" overwrite="${isoverwrite}" preservelastmodified="true">
    	            <fileset dir="${resfolder}/${resources.category.common.folder}" includes="*.png, *.9.png, *.jpg, *.gif,*.xml"  excludes="${rawFolderFiles}"/>
    	        </copy>
				<copy todir="${app.dir}/res/raw" overwrite="${isoverwrite}" preservelastmodified="true">
    	            <fileset dir="${resfolder}/${resources.category.common.folder}" includes="${rawFolderFiles}"/>
    	        </copy>
				<copy todir="${app.dir}/res/raw" overwrite="${isoverwrite}" preservelastmodified="true" failonerror="false">
    	            <fileset dir="${resfolder}/${resources.category.common.folder}/videos" includes="${rawFolderFiles}"/>
    	        </copy>
    		</then>
    		<else>
    	        <copy todir="${app.dir}/res/drawable" overwrite="${isoverwrite}" preservelastmodified="true">
    	            <fileset dir="${resfolder}" includes="*.*" excludes="*.ttf *.otf"/>
    	        </copy>
    		</else>
    	</if>

		<if>
			<equals arg1="${resources.platform.folder}" arg2="$${resources.platform.folder}"/>
             <then>
                <if>
                    <equals arg1="${isWatchBuild.Local}" arg2="true"/>
                    <then>
                        <property name="resources.platform.folder" value="androidwear/native/androidwearos"/>
                    </then>
                    <else>
                        <property name="resources.platform.folder" value="mobile/native/android"/>
                    </else>
                </if>
			</then>
		</if>
		<if>
			<equals arg1="${platform.folder}" arg2="$${platform.folder}"/>
			<then>
                 <if>
                    <equals arg1="${isWatchBuild.Local}" arg2="true"/>
                    <then>
                      <property name="platform.folder" value="androidwearos"/>
                    </then>
                    <else>
                      <property name="platform.folder" value="android"/>
                    </else>
                 </if>
             </then>
		</if>
		<available file="${resfolder}/${resources.platform.folder}" type="dir" property="richandroid.present"/>
    	<if>
    		<equals arg1="${richandroid.present}" arg2="true"/>
    		<then>
				<available file="${resfolder}/${resources.platform.folder}/RootFolderContents" type="dir" property="rootfoldercontents.dir.present"/>
				<if>
				<equals arg1="${rootfoldercontents.dir.present}" arg2="true"/>
					<then>
					<copy todir="${app.dir}" overwrite="${isoverwrite}" preservelastmodified="true" >
						<dirset dir="${resfolder}/${resources.platform.folder}/RootFolderContents"/>
						<fileset dir="${resfolder}/${resources.platform.folder}/RootFolderContents" includes="**"/>
					</copy>
					</then>
				</if>
    	        <copy todir="${app.dir}/res" overwrite="${isoverwrite}" preservelastmodified="true">
					<dirset dir="${resfolder}/${resources.platform.folder}" includes="drawable*"/>
					<fileset dir="${resfolder}/${resources.platform.folder}" includes="drawable*/*.*"/>
					<dirset dir="${resfolder}/${resources.platform.folder}" includes="mipmap*"/>
					<fileset dir="${resfolder}/${resources.platform.folder}" includes="mipmap*/*.*"/>
    	        </copy>
				<copy todir="${app.dir}/res/drawable" overwrite="${isoverwrite}" preservelastmodified="true">
					<fileset dir="${resfolder}/${resources.platform.folder}" includes="*.*" excludes="*.mp4 *.mov *.avi *.mjpeg *.m4v"/>
    	        </copy>
				<copy todir="${app.dir}/res" overwrite="${isoverwrite}" preservelastmodified="true">
					<dirset dir="${resfolder}/${resources.platform.folder}" includes="layout*"/>
					<fileset dir="${resfolder}/${resources.platform.folder}" includes="layout*/*.*"/>
    	        </copy>
				<copy todir="${app.dir}/res" overwrite="${isoverwrite}" preservelastmodified="true">
					<dirset dir="${resfolder}/${resources.platform.folder}" includes="xml*"/>
					<fileset dir="${resfolder}/${resources.platform.folder}" includes="xml*/*.*"/>
    	        </copy>
				<!--FilesToMergeList is list of files for which xml merging is done-->
				<property name="FilesToMergeList" value="values/localnotificationconfig.xml${line.separator}values/locationconfig.xml${line.separator}values/pushconfig.xml${line.separator}values/netconfig.xml"/>
				<!--The merged files from values folder needs to be skipped while overriding the complete values folder from customer given resources on the genrated values folder in app-->
				<!-- As excludesfile in copytask takes only file as argument, with list of files to exclude, we write files to be merged as excludelist into MergeFileList.txt file -->
				<echo file="${extres}/MergeFileList.txt" append="false">${FilesToMergeList}</echo>
				<!--excludes tag must be given first prior to include tag else exclude tag is ignored while copying-->
				<copy todir="${app.dir}/res" overwrite="${isoverwrite}" preservelastmodified="true">
					<dirset dir="${resfolder}/${resources.platform.folder}" includes="values*"/>
					<fileset dir="${resfolder}/${resources.platform.folder}" excludesfile="${extres}/MergeFileList.txt" includes="values*/*.*"/>
				</copy>
				<!--below task replaces line separator with a space in FilesToMergeList property(so that it becomes suitable to be passed as an argument to the jar file)-->
				<propertyregex property="FilesToMergeListasArg" input="${FilesToMergeList}" regexp="${line.separator}" replace=" " global="true" />
				<java fork="true" failonerror="yes" jvm="${installer.javahome}/bin/java" jar="${extres}/XMLMerger.jar">
				<arg line="${DoubleQuotes}${resfolder}/${resources.platform.folder}${DoubleQuotes} ${DoubleQuotes}${app.dir}/res${DoubleQuotes} ${FilesToMergeListasArg}"/>
				</java>
				<copy todir="${app.dir}/res" overwrite="${isoverwrite}" preservelastmodified="true">
					<dirset dir="${resfolder}/${resources.platform.folder}" includes="raw*"/>
					<fileset dir="${resfolder}/${resources.platform.folder}" includes="raw*/*"/>
				</copy>
				<copy todir="${app.dir}/res/raw" overwrite="${isoverwrite}" preservelastmodified="true">
					<fileset dir="${resfolder}/${resources.platform.folder}" includes="*.mp4 *.mov *.avi *.mjpeg *.m4v"/>
				</copy>
				<copy todir="${app.dir}/res/raw" overwrite="${isoverwrite}" preservelastmodified="true" failonerror="false">
					<fileset dir="${resfolder}/${resources.platform.folder}/videos" includes="*.mp4 *.mov *.avi *.mjpeg *.m4v"/>
				</copy>
				<copy todir="${app.dir}/res" overwrite="${isoverwrite}" preservelastmodified="true">
					<dirset dir="${resfolder}/${resources.platform.folder}" includes="anim*"/>
					<fileset dir="${resfolder}/${resources.platform.folder}" includes="anim*/*.*"/>
				</copy>
				<available file="${resfolder}/${resources.platform.folder}/assets" type="dir" property="android.res.assets.present"/>
				<if>
					<equals arg1="${android.res.assets.present}" arg2="true"/>
					<then>
						<copy todir="${assets.dir}" overwrite="${isoverwrite}" preservelastmodified="true">
							<dirset dir="${resfolder}/${resources.platform.folder}/assets" />
							<fileset dir="${resfolder}/${resources.platform.folder}/assets" />
						</copy>
					</then>
				</if>
    		</then>
    		<else>
				<available file="${resfolder}/${platform.folder}" type="dir" property="android.present"/>
				<if>
					<equals arg1="${android.present}" arg2="true"/>
					<then>
						<copy todir="${app.dir}/res" overwrite="${isoverwrite}" preservelastmodified="true">
							<dirset dir="${resfolder}/${platform.folder}" includes="drawable*"/>
							<fileset dir="${resfolder}/${platform.folder}" includes="drawable*/*.*"/>
						</copy>
						<copy todir="${app.dir}/res/drawable" overwrite="${isoverwrite}" preservelastmodified="true">
							<fileset dir="${resfolder}/${platform.folder}" includes="*.*"/>
						</copy>
					</then>
				</if>
    		</else>
    	</if>
		<if>
    		<equals arg1="${common.present}" arg2="true"/>
    		<then>
    	        <copy todir="${assets.dir}" overwrite="${isoverwrite}" preservelastmodified="true">
    	            <fileset dir="${resfolder}/${resources.common.folder}" includes="*.cer" />
    	        </copy>
			</then>
    	</if>
		<if>
    		<equals arg1="${category.common.present}" arg2="true"/>
    		<then>
    	        <copy todir="${assets.dir}" overwrite="${isoverwrite}" preservelastmodified="true">
    	            <fileset dir="${resfolder}/${resources.category.common.folder}" includes="*.cer" />
    	        </copy>
			</then>
    	</if>
 	</target>

	<target name="copyninepatchimages">
        <echo>Copying the nine patch images and delete the actual png image in android drawable folder</echo>
		<for param="file">
			<path>
				<fileset dir="${app.dir}/res/drawable">
					<include name="**/*.9.png"/>
				</fileset>
			</path>
			<sequential>
				<ant antfile="${currentfile}"  target="check-for-actual-png-file">
					<property name="actual-png" value="@{file}" />
				</ant>
			</sequential>
		</for>
	</target>

	<target name="check-for-actual-png-file">
		<basename file="${actual-png}" property="actual-pngfile-name" />
		<propertyregex property="actual.png" input="${actual-pngfile-name}" regexp="(.*)\.9\.png" select="\1.png" casesensitive="false" />
		<delete file="${app.dir}/res/drawable/${actual.png}" />
	</target>

	<target name="copy-spa-resources">
		<mkdir dir="${assets.dir}/web"/>
		<mkdir dir="${assets.dir}/web/images"/>

		<available file="${webmodule.loc}" type="dir" property="webres.present"/>
    	<if>
    		<equals arg1="${webres.present}" arg2="true"/>
    		<then>
    	        <copy todir="${assets.dir}/web" overwrite="true" preservelastmodified="true">
    	            <fileset dir="${webmodule.loc}" includes="**/*.*"/>
    	        </copy>
			</then>
    	</if>
		<foreach target="copy-spa-image-folder" param="spaimgdir.res" inheritall="true">
			<path>
				<dirset dir="${resfolder}/${resources.mobile.web}/spaandroid">
					<include name="images*"/>
				</dirset>
			</path>
		</foreach>
		<available file="${hybridmode.dir}" type="dir" property="hybridmode.present"/>
    	<if>
    		<equals arg1="${hybridmode.present}" arg2="true"/>
    		<then>
    	        <copy todir="${assets.dir}/web" overwrite="true" preservelastmodified="true">
    	            <fileset dir="${hybridmode.dir}" includes="**/*.*"/>
    	        </copy>
			</then>
    	</if>
		<copy file="${extres}/nativeplatform.js" tofile="${assets.dir}/web/appjs/nativeplatform.js" overwrite="true"/>
	</target>

 	<target name="copy-spa-image-folder">
		<propertyregex 	property="spaimgdir.assets" input="${spaimgdir.res}" regexp=".*images(.*)$" select="\1"/>
		<mkdir dir="${assets.dir}/web/images/${spaimgdir.assets}"/>

		<available file="${resfolder}/${resources.common.folder}" type="dir" property="common.present"/>
    	<if>
    		<equals arg1="${common.present}" arg2="true"/>
    		<then>
				<copy todir="${assets.dir}/web/images/${spaimgdir.assets}" overwrite="true" preservelastmodified="true">
					<fileset dir="${resfolder}/${resources.common.folder}" includes="*.*" excludes="*.cer" />
				</copy>
			</then>
		</if>
		<available file="${resfolder}/${resources.category.common.folder}" type="dir" property="category.common.present"/>
		<if>
    		<equals arg1="${category.common.present}" arg2="true"/>
    		<then>
				<copy todir="${assets.dir}/web/images/${spaimgdir.assets}" overwrite="true" preservelastmodified="true">
					<fileset dir="${resfolder}/${resources.category.common.folder}" includes="*.*" excludes="*.cer" />
				</copy>
			</then>
		</if>
		<available file="${resfolder}/${resources.mobile.web}/spaandroid" type="dir" property="spaandroid.present"/>
    	<if>
			<equals arg1="${spaandroid.present}" arg2="true"/>
    		<then>
				<copy todir="${assets.dir}/web/images/${spaimgdir.assets}" overwrite="true" preservelastmodified="true">
					<fileset dir="${resfolder}/${resources.mobile.web}/spaandroid" includes="*.*"/>
				</copy>
			</then>
		</if>
		<copy todir="${assets.dir}/web/images/${spaimgdir.assets}" overwrite="true" preservelastmodified="true">
			<fileset dir="${resfolder}/${resources.mobile.web}/spaandroid/images${spaimgdir.assets}" includes="*.*"/>
		</copy>
		<echo message="---webcommons.plugin.loc---- ${webcommons.plugin.loc}"/>
		<echo message="---assets.dir---- ${assets.dir}/web/images/${spaimgdir.assets}"/>
		<available file="${webcommons.plugin.loc}/common/wap/inputdata/webfiles/iphone" type="dir" property="tc.images.present"/>
		<if>
		<equals arg1="${tc.images.present}" arg2="true"/>
		<then>
			<echo message = "Came inside the tc common images"/>
			<copy todir="${assets.dir}/web/images/${spaimgdir.assets}" overwrite="true" preservelastmodified="true">
				<fileset dir="${webcommons.plugin.loc}/common/wap/inputdata/webfiles/iphone" includes="*.*"/>
			</copy>
		</then>
		</if>
	</target>

	<target name="copysplashresources">
		<if>
		<equals arg1="${isFPbuild}" arg2="false"/>
		<then>
			<propertyregex property="splashAnimImages" input="${splash.animation.images}" regexp="," replace=" "/>
				<echo>Copying logo and splash resources *${logo}* *${splashScreenImg}* *${splashAnimImages}*</echo>
				<available file="${resfolder}/${resources.common.folder}" type="dir" property="common.present"/>
				<if>
					<equals arg1="${common.present}" arg2="true"/>
					<then>
						<copy todir="${app.dir}/res/drawable" overwrite="true" preservelastmodified="true">
							<fileset dir="${resfolder}/${resources.common.folder}" includes="${logo} ${splashScreenImg} ${splashAnimImages}"/>
						</copy>
						<copy todir="${app.dir}/res/raw" overwrite="true" preservelastmodified="true">
							<fileset dir="${resfolder}/${resources.common.folder}" includes="${splash.video}"/>
						</copy>
					</then>
					<else>
						<copy todir="${app.dir}/res/drawable" overwrite="true" preservelastmodified="true">
							<fileset dir="${resfolder}" includes="${logo} ${splashScreenImg} ${splashAnimImages}"/>
						</copy>
					</else>
				</if>
				<available file="${resfolder}/${resources.category.common.folder}" type="dir" property="category.common.present"/>
				<if>
					<equals arg1="${category.common.present}" arg2="true"/>
					<then>
						<copy todir="${app.dir}/res/drawable" overwrite="true" preservelastmodified="true">
							<fileset dir="${resfolder}/${resources.category.common.folder}" includes="${logo} ${splashScreenImg} ${splashAnimImages}"/>
						</copy>
						<copy todir="${app.dir}/res/raw" overwrite="true" preservelastmodified="true">
							<fileset dir="${resfolder}/${resources.category.common.folder}" includes="${splash.video}"/>
						</copy>
					</then>
					<else>
						<copy todir="${app.dir}/res/drawable" overwrite="true" preservelastmodified="true">
							<fileset dir="${resfolder}" includes="${logo} ${splashScreenImg} ${splashAnimImages}"/>
						</copy>
					</else>
				</if>
				<if>
					<equals arg1="${resources.platform.folder}" arg2="$${resources.platform.folder}"/>
					<then>
						<property name="resources.platform.folder" value="mobile/native/android"/>
					</then>
				</if>
				<if>
					<equals arg1="${platform.folder}" arg2="$${platform.folder}"/>
					<then>
						<property name="platform.folder" value="android"/>
					</then>
				</if>
				<available file="${resfolder}/${resources.platform.folder}" type="dir" property="richandroid.present"/>
				<if>
					<equals arg1="${richandroid.present}" arg2="true"/>
					<then>
						<copy todir="${app.dir}/res" overwrite="true" preservelastmodified="true">
							<dirset dir="${resfolder}/${resources.platform.folder}" includes="drawable*"/>
						</copy>
						<if>
							<not>
								<equals arg1="${logo}" arg2=""/>
							</not>
							<then>
								<copy todir="${app.dir}/res" overwrite="true" preservelastmodified="true">
									<fileset dir="${resfolder}/${resources.platform.folder}" includes="drawable*/${logo}"/>
								</copy>
							</then>
						</if>
						<if>
							<not>
								<equals arg1="${splashScreenImg}" arg2=""/>
							</not>
							<then>
								<copy todir="${app.dir}/res" overwrite="true" preservelastmodified="true">
									<fileset dir="${resfolder}/${resources.platform.folder}" includes="drawable*/${splashScreenImg}"/>
								</copy>
							</then>
						</if>

						<for list="${splash.animation.images}" delimiter="," param = "val">
							<sequential>
							<echo>copying @{val} </echo>
							<copy todir="${app.dir}/res" overwrite="true" preservelastmodified="true">
								<fileset dir="${resfolder}/${resources.platform.folder}" includes="drawable*/@{val}"/>
							</copy>
							</sequential>
						</for>
						<copy todir="${app.dir}/res/drawable" overwrite="true" preservelastmodified="true">
							<fileset dir="${resfolder}/${resources.platform.folder}" includes="${logo} ${splashScreenImg} ${splashAnimImages}"/>
						</copy>
						<if>
							<not>
								<equals arg1="${splash.video}" arg2=""/>
							</not>
							<then>
								<copy todir="${app.dir}/res" overwrite="true" preservelastmodified="true">
									<dirset dir="${resfolder}/${resources.platform.folder}" includes="raw*"/>
									<fileset dir="${resfolder}/${resources.platform.folder}" includes="raw*/${splash.video}"/>
								</copy>
							</then>
						</if>
						<copy todir="${app.dir}/res/raw" overwrite="true" preservelastmodified="true">
							<fileset dir="${resfolder}/${resources.platform.folder}" includes="${splash.video}"/>
						</copy>
					</then>
					<else>
						<available file="${resfolder}/${platform.folder}" type="dir" property="android.present"/>
						<if>
							<equals arg1="${android.present}" arg2="true"/>
							<then>
								<copy todir="${app.dir}/res" overwrite="true" preservelastmodified="true">
									<dirset dir="${resfolder}/${platform.folder}" includes="drawable*"/>
								</copy>
								<for list="${splash.animation.images}" delimiter="," param = "val">
									<sequential>
										<echo>copying @{val} </echo>
										<copy todir="${app.dir}/res" overwrite="true" preservelastmodified="true">
											<fileset dir="${resfolder}/${platform.folder}" includes="drawable*/@{val}"/>
										</copy>
									</sequential>
								</for>
								<copy todir="${app.dir}/res/drawable" overwrite="true" preservelastmodified="true">
									<fileset dir="${resfolder}/${platform.folder}" includes="${logo} ${splashScreenImg} ${splashAnimImages}"/>
								</copy>
							</then>
						</if>
					</else>
				</if>
		</then>
		</if>
 	</target>

	<target name="configureReleaseSignInfo">
	<if>
		<not>
			<equals arg1="${build.option.local}" arg2="debug"/>
		</not>
		<then>
		<if>
			<and>
				<not>
				<equals arg1="${keyStoreFilePath}" arg2="$${keyStoreFilePath}"/>
				</not>
				<not>
				<equals arg1="${keyStoreFilePath}" arg2=""/>
				</not>
			</and>
			<then>
				<propertyregex property="keyStoreFilePathTemp" input="${keyStoreFilePath}" regexp="\\" replace="/" defaultValue="${keyStoreFilePath}"/>
				<if>
				<available file="${keyStoreFilePathTemp}"/>
					<then>
						<echo file="${dist.dir}/keystore.properties" >
							keyPassword=${keyPassword}
							keyStorePassword =${keyStorePassword}
							keyAlias=${keyAlias}
							keyStoreFilePath=${keyStoreFilePathTemp}
						</echo>
						<echo>keyStoreFilePath :  ${keyStoreFilePathTemp} , keyAlias : ${keyAlias} , keyStorePassword : ${keyStorePassword} , keyPassword : ${keyPassword}</echo>
					</then>
				</if>
			</then>
		</if>
		</then>
	</if>
	</target>

	<target name="signApk">
	<!--This target will sign the unsigned apk generated by release build using debug key-->
		<echo>Release apk signing started.</echo>
		<for list="universal,release,arm64-v8a,armeabi-v7a,x86,x86_64" param="apk">
			<sequential>
		<if>
				<equals arg1="@{apk}" arg2="release"/>
				<then>
					<var name="release-apk" value="${release}"/>
					<var name="debug-apk" value="${debug}"/>
				</then>
				<else>
					<var name="release-apk" value="${@{apk}Release}"/>
					<var name="debug-apk" value="${@{apk}Debug}"/>
				</else>
			</if>
			<if>
			<and>
					<available file="${release-apk}"/>
					<contains casesensitive="false" string="${release-apk}" substring="unsigned" />
			</and>
			<then>
					<var name="release-apk-to-sign" value="${debug-apk}"/>
	 				<copy file="${release-apk}" tofile="${release-apk-to-sign}" overwrite="true"/>
				<if>
					<available file="${release-apk-to-sign}"/>
					<then>
						<property name="APKSigner.path" location="${app.dir}/../../extres/APKSigner.jar"/>
						<property name="workspace.path" location="${project.loc}/../"/>
						<echo>Invoking APKSigner.jar to sign apk</echo>
						<!--
						This APKSigner.jar does the following things
						1) Finds the .android/debug.keystore in user.home env variable and signs the apk if found
						2) If user.home doesn't contain .android folder or .android/debug.keystore ,it tries recreating it.
						3) If key is expired tries creating new one.
						4) If the .android/debug.keystore doesn't exists due to key or folder creation failure, it creates a key in <workspace>/debug.keystore if it is not already present.
						5) If <workspace>/debug.keystoreis present , it checks for the key expiry and re-creates if expired.
						6) Signs the apk using a valid debug key if it is able to create or reports failure in signing if key creation or signing fails.
						-->
						<if>
							<not>
								<equals arg1="${os.family}" arg2="windows"/>
							</not>
							<then>
								<exec-shell executable="cmd" failonerror="false" failifexecutionfails="true">
								<arg value="/c"/>
								<arg value="chmod 774 ${DoubleQuotes}${andhome}${file.separator}build-tools${file.separator}${build_tools_version}${file.separator}apksigner${DoubleQuotes}"/>
							</exec-shell>
							</then>
						</if>
						<java jar="${APKSigner.path}" fork="true" jvm="${installer.javahome}/bin/java" failonerror="true">
							<env key="JAVA_HOME" path="${installer.javahome}"/>
							<arg line="&quot;--workspacepath&quot;"/>
							<arg line="&quot;${workspace.path}&quot;"/>
							<arg line="&quot;--apkpath&quot;"/>
							<arg line="&quot;${release-apk-to-sign}&quot;"/>
							<arg line="&quot;--javahome&quot;"/>
							<arg line="&quot;${installer.javahome}&quot;"/>
							<arg line="&quot;--sdkhome&quot;"/>
							<arg line="&quot;${andhome}&quot;"/>
							<arg line="&quot;--buildtoolsversion&quot;"/>
							<arg line="&quot;${build_tools_version}&quot;"/>
						</java>
					</then>
					<else>
							<echo>unsigned version of ${release-apk} not found to copy.</echo>
					</else>
				</if>
			</then>

		</if>
			</sequential>
		</for>
	</target>

    <target name="buildapk">
	<trycatch>
		<try>
				<echo>Java Path used by Gradle: ${installer.javahome}</echo>
				<echo>Gradle Path : ${gradle.binpath}</echo>
				<echo>Packaging the android ${appid} application</echo>
				<property name="SubstituteDriveJar" value="${extres}/SubstituteDrive.jar"/>
				<condition property="generateAppBundle.Local" value = "true" else = "false">
					<and>
					<not>
						<equals arg1="${isLibrary}" arg2="true"/>
					</not>
					<equals arg1="${generateAppBundle}" arg2="true"/>
					</and>
				</condition>
				<if>
				<equals arg1="${generateAppBundle.Local}" arg2="true"/>
				<then>
					<property name="gradle_debug_task" value="bundleDebug"/>
					<property name="gradle_release_task" value="bundleRelease"/>
				</then>
				<else>
					<property name="gradle_debug_task" value="assembleDebug"/>
					<property name="gradle_release_task" value="assembleRelease"/>
				</else>
				</if>
				<if>
					<equals arg1="${os.family}" arg2="windows"/>
					<then>
						<echo>Substituting drive</echo>
						<tstamp>
							<format property="TimeStamp" pattern="yyyyMMddHHmmsssss" locale="en,GB"/>
						</tstamp>
						<if>
							<equals arg1="${isUniversalApp}" arg2 ="true" />
							<then>
								<property name="MobileUniqCode" value="${appid}-MobUniversal-${TimeStamp}" />
							</then>
							<else>
								<property name="MobileUniqCode" value="${appid}-Mobile-${TimeStamp}" />
							</else>
						</if>
						<echo file="${app.dir}\${MobileUniqCode}.txt">${MobileUniqCode}</echo>
						<java fork="true" failonerror="yes" jvm="${installer.javahome}/bin/java" jar="${SubstituteDriveJar}">
							<arg value="substitute"/>
							<arg value="${DoubleQuotes}${app.dir}/..${DoubleQuotes}"/>
							<arg value="${DoubleQuotes}${basedir}${DoubleQuotes}"/>
							<arg value="${DoubleQuotes}${app.dir}${DoubleQuotes}"/>
							<arg value="${MobileUniqCode}.txt"/>
						</java>
						<if>
							<available file="${basedir}/build-drive.txt"/>
							<then>
								<loadfile property="subst-drive" srcfile="${basedir}/build-drive.txt"/>
								<length string="${subst-drive}" property="length.subst-drive"/>
								<echo>subst-drive length ${length.subst-drive} ${subst-drive}</echo>
								<if>
									<not>
									<equals arg1="${length.subst-drive}" arg2="0"/>
									</not>
									<then>
										<basename property="app.dir.name" file="${app.dir}"/>
										<property name="app-build.dir" value="${subst-drive}:\${app.dir.name}"/>
										<echo>app-build.dir is  ${app-build.dir}</echo>
									</then>
									<else>
										<property name="app-build.dir" value="${app.dir}"/>
										<echo>app-build.dir is  ${app-build.dir}</echo>
									</else>
								</if>
							</then>
							<else>
								<property name="app-build.dir" value="${app.dir}"/>
								<echo>app-build.dir is  ${app-build.dir}</echo>
							</else>
						</if>
					</then>
					<else>
						<property name="app-build.dir" value="${app.dir}"/>
						<echo>app-build.dir is  ${app-build.dir}</echo>
					</else>
				</if>
				<!--isInternetConnectionAvailable property is not used currently-->
				<echo>isInternetConnectionAvailable ${isInternetConnectionAvailable}</echo>
				<echo>plugin loc ${plugin.loc} </echo>
				<property name="gradlebuild.bin" value="${app-build.dir}/gradlew"/>

				<if>
					<os family="windows" />
						<then>
							<echo>${gradlebuild.bin} -version</echo>
							<exec-shell executable="cmd" failonerror="false" failifexecutionfails="false">
								<arg value="/c"/>
								<arg value="${DoubleQuotes}${DoubleQuotes}${gradlebuild.bin}${DoubleQuotes} -version${DoubleQuotes}"/>
							</exec-shell>

							<!--For few machines we are getting below error on windows machines.
							Build file 'A:\AppName\build.gradle' does not exist.
							As a solution we are stopping gradle deamon to resolve the issue.
							This solution is just based on observation and may not be exact resolution.
							This stop is executed only incase of clean build and on windows machine only.-->
						<if>
                            <not>
                                <equals arg1="${killGradleDaemon}" arg2="false" />
                            </not>
							<then>
							<echo>${gradlebuild.bin} --stop</echo>
							<exec-shell executable="cmd" failonerror="false" failifexecutionfails="false" >
								<env key="JAVA_HOME" path="${installer.javahome}"/>
								<arg value="/c"/>
								<arg value="${DoubleQuotes}${DoubleQuotes}${gradlebuild.bin}${DoubleQuotes} --stop ${DoubleQuotes}"/>
							</exec-shell>
							</then>
						</if>
						<if>
							<available file="${app-build.dir}/outputAPKVariants.properties"/>
								<then>
									<delete file="${app-build.dir}/outputAPKVariants.properties"/>
								</then>
						</if>

							<if>
							<not>
								<equals arg1="${isIncrementalBuild.local}" arg2="true"/>
							</not>
							<then>


							<echo>isIncrementalBuild = ${isIncrementalBuild.local} invoking clean build</echo>
							<exec-shell dir="${app-build.dir}" executable="cmd" failonerror="true" failifexecutionfails="true" >
								<env key="JAVA_HOME" path="${installer.javahome}"/>
								<arg value="/c"/>
								<arg value="${DoubleQuotes}${DoubleQuotes}${gradlebuild.bin}${DoubleQuotes} clean -b ${DoubleQuotes}${app-build.dir}/build.gradle${DoubleQuotes}${DoubleQuotes}"/>
							</exec-shell>
							</then>
							</if>

							<if>
								<not>
									<equals arg1="${build.option.local}" arg2="debug"/>
									<!-- Handles both release and protected cases-->
								</not>
								<then>
									<exec-shell dir="${app-build.dir}" executable="cmd" failonerror="true" failifexecutionfails="true" >
										<env key="JAVA_HOME" path="${installer.javahome}"/>
										<arg value="/c"/>
										<arg value="${DoubleQuotes}${gradlebuild.bin} ${gradle_release_task}  -b ${app-build.dir}/build.gradle${DoubleQuotes}"/>
									</exec-shell>
									<replace file="${app-build.dir}/outputAPKVariants.properties" token="\" value="//"/>
									 <loadproperties srcFile="${app-build.dir}/outputAPKVariants.properties"/>	
									<if>
										<not>
											<equals arg1="${isLibraryBuild}" arg2="true" />
										</not>
										<then>
											<ant antfile="${currentfile}"  target="signApk"/>
										</then>
									</if>
								</then>
								<else>
									<exec-shell dir="${app-build.dir}" executable="cmd" failonerror="true" failifexecutionfails="true" >
										<env key="JAVA_HOME" path="${installer.javahome}"/>
										<arg value="/c"/>
										<arg value="${DoubleQuotes}${gradlebuild.bin} ${gradle_debug_task}  -b ${app-build.dir}/build.gradle${DoubleQuotes}"/>
									</exec-shell>
								</else>
							</if>
						</then>
						<else>
							<exec-shell executable="cmd" failonerror="false" failifexecutionfails="true">
								<arg value="/c"/>
								<arg value="chmod 774 ${DoubleQuotes}${gradlebuild.bin}${DoubleQuotes}"/>
							</exec-shell>

							<echo>${gradlebuild.bin} -version</echo>
							<exec-shell executable="cmd" failonerror="false" failifexecutionfails="false">
								<arg value="/c"/>
								<arg value="${DoubleQuotes}${gradlebuild.bin}${DoubleQuotes} -version"/>
							</exec-shell>

							<!--For few machines we are getting below error on windows machines.
							Build file 'A:\AppName\build.gradle' does not exist.
							As a solution we are stopping gradle deamon to resolve the issue.
							This solution is just based on observation and may not be exact resolution.
							This stop is executed only incase of clean build and on windows machine only.-->

							<if>
								<not>
									<equals arg1="${killGradleDaemon}" arg2="false" />
								</not>
								<then>
								<echo>${gradlebuild.bin} --stop</echo>
								<exec-shell executable="cmd" failonerror="false" failifexecutionfails="false" >
									<env key="JAVA_HOME" path="${installer.javahome}"/>
									<arg value="/c"/>
									<arg value="${DoubleQuotes}${gradlebuild.bin}${DoubleQuotes} --stop"/>
								</exec-shell>
								</then>
							</if>
							<if>
								<available file="${app-build.dir}/outputAPKVariants.properties"/>
									<then>
										<delete file="${app-build.dir}/outputAPKVariants.properties"/>
									</then>
							</if>

							<if>
							<not>
								<equals arg1="${isIncrementalBuild.local}" arg2="true"/>
							</not>
							<then>
							<echo>isIncrementalBuild = ${isIncrementalBuild.local} invoking clean build</echo>
							<exec-shell dir="${app-build.dir}" executable="cmd" failonerror="true" failifexecutionfails="true" >
								<env key="JAVA_HOME" path="${installer.javahome}"/>
								<arg value="/c"/>
								<arg value="${DoubleQuotes}${gradlebuild.bin}${DoubleQuotes} clean -b ${DoubleQuotes}${app-build.dir}/build.gradle${DoubleQuotes}"/>
							</exec-shell>
							</then>
							</if>
							<if>
								<not>
									<equals arg1="${build.option.local}" arg2="debug"/>
									<!-- Handles both release and protected cases-->
								</not>
								<then>
									<exec-shell dir="${app-build.dir}" executable="cmd" failonerror="true" failifexecutionfails="true" >
										<env key="JAVA_HOME" path="${installer.javahome}"/>
										<arg value="/c"/>
										<arg value="${DoubleQuotes}${gradlebuild.bin}${DoubleQuotes} ${gradle_release_task} -b ${DoubleQuotes}${app-build.dir}/build.gradle${DoubleQuotes}"/>
									</exec-shell>
									<replace file="${app-build.dir}/outputAPKVariants.properties" token="\" value="//"/>
									 <loadproperties srcFile="${app-build.dir}/outputAPKVariants.properties"/>
									<if>
										<not>
											<equals arg1="${isLibraryBuild}" arg2="true" />
										</not>
										<then>
											<ant antfile="${currentfile}"  target="signApk"/>
										</then>
									</if>
								</then>
								<else>
									<exec-shell dir="${app-build.dir}" executable="cmd" failonerror="true" failifexecutionfails="true">
										<env key="JAVA_HOME" path="${installer.javahome}"/>
										<arg value="/c"/>
										<arg value="${DoubleQuotes}${gradlebuild.bin}${DoubleQuotes} ${gradle_debug_task} -b ${DoubleQuotes}${app-build.dir}/build.gradle${DoubleQuotes}"/>
									</exec-shell>
								</else>
							</if>
						</else>
				</if>
			<replace file="${app-build.dir}/outputAPKVariants.properties" token="\" value="//"/>
			<if>
				<equals arg1="${generateAppBundle.Local}" arg2="true"/>               
				<then>
					<ant antfile="${currentfile}"  target="publish_aab"/> 
				</then>
				<else>
					<ant antfile="${currentfile}"  target="publish"/> 
				</else>
			</if>			
		</try>
		<finally>
		<if>
			<available file="${basedir}/build-drive.txt"/>
			<then>
			<java fork="true" failonerror="yes" jvm="${installer.javahome}/bin/java" jar="${SubstituteDriveJar}">
				<arg value="unsubstitute"/>
				<arg value="${subst-drive}"/>
				<arg value="${basedir}"/>
			</java>
			</then>
			</if>
	</finally>
	</trycatch>
    </target>

    <target name="prepareForLibraryBuild">

        <if>
	     <equals arg1="${dev.language}" arg2="js"/>
	     <then>
	            <copy file="${extlibs}/armeabi-v7a/libc++_shared.so" tofile="${app.dir}/libs/armeabi-v7a/libc++_shared.so" overwrite="true"/>
		    <copy file="${extlibs}/arm64-v8a/libc++_shared.so" tofile="${app.dir}/libs/arm64-v8a/libc++_shared.so" overwrite="true"/>
		    <copy file="${extlibs}/x86/libc++_shared.so" tofile="${app.dir}/libs/x86/libc++_shared.so" overwrite="true"/>
		    <copy file="${extlibs}/x86_64/libc++_shared.so" tofile="${app.dir}/libs/x86_64/libc++_shared.so" overwrite="true"/>
	     </then>
        </if>

        <if>
	    <equals arg1="${build.option.local}" arg2="debug"/>
	    <then>
	           <copy file="${extlibs}/armeabi-v7a/libkonyjsvm_debug.so" tofile="${app.dir}/libs/armeabi-v7a/libkonyjsvm.so" overwrite="true"/>
		   <copy file="${extlibs}/arm64-v8a/libkonyjsvm_debug.so" tofile="${app.dir}/libs/arm64-v8a/libkonyjsvm.so" overwrite="true"/>
		   <copy file="${extlibs}/x86/libkonyjsvm_debug.so" tofile="${app.dir}/libs/x86/libkonyjsvm.so" overwrite="true"/>
		   <copy file="${extlibs}/x86_64/libkonyjsvm_debug.so" tofile="${app.dir}/libs/x86_64/libkonyjsvm.so" overwrite="true"/>

	    </then>
	   <elseif>
                <equals arg1="${build.option.local}" arg2="release"/>
                <then>
                      <copy file="${extlibs}/armeabi-v7a/libkonyjsvm_release.so" tofile="${app.dir}/libs/armeabi-v7a/libkonyjsvm.so" overwrite="true"/>
		      <copy file="${extlibs}/arm64-v8a/libkonyjsvm_release.so" tofile="${app.dir}/libs/arm64-v8a/libkonyjsvm.so" overwrite="true"/>
		      <copy file="${extlibs}/x86/libkonyjsvm_release.so" tofile="${app.dir}/libs/x86/libkonyjsvm.so" overwrite="true"/>
		      <copy file="${extlibs}/x86_64/libkonyjsvm_release.so" tofile="${app.dir}/libs/x86_64/libkonyjsvm.so" overwrite="true"/>
		</then>
	  </elseif>
	  <else>
               <copy file="${extlibs}/arm64-v8a/libkonyjsvm_release_protected.so" tofile="${app.dir}/libs/arm64-v8a/libkonyjsvm.so" overwrite="true"/>
	       <copy file="${extlibs}/armeabi-v7a/libkonyjsvm_release_protected.so" tofile="${app.dir}/libs/armeabi-v7a/libkonyjsvm.so" overwrite="true"/>
	       <copy file="${extlibs}/x86_64/libkonyjsvm_release_protected.so" tofile="${app.dir}/libs/x86_64/libkonyjsvm.so" overwrite="true"/>
	       <copy file="${extlibs}/x86/libkonyjsvm_release_protected.so" tofile="${app.dir}/libs/x86/libkonyjsvm.so" overwrite="true"/>
	  </else>
        </if>

        <if>
	     <equals arg1="${UseSQLCipherFIPS}" arg2="true"/>
	     <then>
		    <copy todir="${app.dir}/libs/">
				<fileset dir="${extlibs}/SQLCIPHER_FIPS/libs/" />
				<fileset dir="${extlibs}/CryptoLib/libs/" />
				<file file="${extres}/konysqlcipher.jar" />
			</copy>
	     </then>
        </if>

        <if>
	     <equals arg1="${UseOpenSSLLibrary}" arg2="true"/>
	     <then>
		    <copy todir="${app.dir}/libs/">
				<fileset dir="${extlibs}/CryptoWrapper/libs/" />
				<fileset dir="${extlibs}/CryptoLib/libs/" />
			</copy>
	     </then>
        </if>

        <concat fixlastline="yes" destfile="${assets.dir}/application.properties" append="true">
	           Package : ${package}
		   isLibrary : true
	</concat>

	<replace file="${app.dir}/build.gradle" token="applicationId" value="//applicationId"/>
	<replace file="${app.dir}/build.gradle" token="apply plugin: 'com.android.application'" value="apply plugin: 'com.android.library'"/>
	<replace file="${app.dir}/build.gradle" token="applicationVariants" value="libraryVariants"/>
	<replace file="${app.dir}/AndroidManifest.xml" token="action.MAIN" value="action.${appid}Launcher"/>
	<replace file="${app.dir}/AndroidManifest.xml" token="category.LAUNCHER" value="category.DEFAULT"/>
	<replace file="${app.dir}/AndroidManifest.xml" token="tools:replace=&quot;icon&quot;" value=""/>
	<replace file="${app.dir}/AndroidManifest.xml" token="tools:remove=&quot;supportsRtl&quot;" value=""/>
	<replaceregexp file="${app.dir}/AndroidManifest.xml" match="android:icon=&quot;@[a-zA-Z0-9]+/[a-zA-Z0-9]+&quot;" replace=""/>

    </target>

    <target name="compile">
		<if>
		      <equals arg1="${isLibraryBuild}" arg2="true"/>
		       <then>
		              <ant antfile="${currentfile}" target="prepareForLibraryBuild">
			       </ant>
			</then>
		</if>

	 <ant antfile="${currentfile}"  target="calculateChecksum">
	 </ant>

   <!-- Note incase of UniversalApp build both mobile and tablet builds are triggered in sequence .Hence we combine resources ,assets & js files of both mobile and tablet and build single binary when tablet build is executed.
    Hence skipping compilation, publish, precompile, postcompile and cordova build tasks in mobile build to avoid duplicate execution. -->
    	<if>
     	 <not>
     	 	<equals arg1="${isUniversalApp}" arg2 ="true" />
     	 </not>
         <then>
         	<ant antfile="${currentfile}"  target="buildapk"/>
         </then>
    	</if>	
    </target>		 
    
	<target name="publish_aab">
		<property name="output_file_name" value="luavmandroid_aab.aab"/>
		<if>
			<equals arg1="${build.option}" arg2="debug"/>
			<then>
				<property name="aab.loc" value="${app-build.dir}/build/outputs/bundle/debug/${appid}-debug.aab"/>
			</then>
			<elseif>
				<equals arg1="${build.option}" arg2="release"/>
				<then>
					<property name="aab.loc" value="${app-build.dir}/build/outputs/bundle/release/${appid}-release.aab"/>
				</then>
			</elseif>
			<elseif>
				<equals arg1="${build.option}" arg2="protected"/>
				<then>
					<property name="aab.loc" value="${app-build.dir}/build/outputs/bundle/release/${appid}-release.aab"/>
				</then>
			</elseif>
		</if>
		<if>
			<available file="${aab.loc}"/>
			<then>
				<copy file="${aab.loc}" tofile="${dist.dir}/${output_file_name}"/>
			</then>
			<else>
				<echo> build.gradle might have added Product build flavours, plain debug/release Android aab not found to copy.</echo>
			</else>
		</if>
	</target>
    
	<target name="publish">
    	<if>
    		<not>
    			<equals arg1="${isUniversalApp}" arg2="true"/>
    		 </not>
    		<then>
				<loadproperties srcFile="${app.dir}/outputAPKVariants.properties"/>
				<echo>Preparing the package for publish</echo>
				<if>
					<and>
						<not>
						<available file="${debug}"/>
						</not>
						<available file="${universalDebug}"/>
					</and>
					<then>
						<property name="debug" value="${universalDebug}"/>
					</then>
				</if>
				<if>
				<and>
					<not>
					<available file="${release}"/>
					</not>
					<available file="${universalRelease}"/>
				</and>
					<then>
						<property name="release" value="${universalRelease}"/>
					</then>
				</if>
				<if>
					<equals arg1="${isFPbuild}" arg2="false"/>
					<then>
						<if>
							<available file="${debug}"/>
							<then>
								<if>
									<equals arg1="${isLibraryBuild}" arg2="true"/>
									<then>
										<ant antfile="${currentfile}" target="copy_aars" >
										   <property name="appAarFilePath" value="${debug}"/>
										</ant>
									</then>
									<else>
										<copy file="${debug}" tofile="${dist.dir}/luavmandroid.apk"/>
									</else>
								</if>
							</then>
							<elseif>
								<available file="${release}"/>
								<then>
									<if>
										<equals arg1="${isLibraryBuild}" arg2="true"/>
										<then>
											<ant antfile="${currentfile}" target="copy_aars" >
										   <property name="appAarFilePath" value="${release}"/>
										</ant>
										</then>
										<else>
											<echo>Release signed ${appid}-release.apk found </echo>
											<copy file="${release}" tofile="${dist.dir}/luavmandroid.apk"/>
										</else>
									</if>
								</then>
							</elseif>
							<else>
								<echo> build.gradle might have added Product build flavours, plain debug/release Android apk not found to copy.</echo>
							</else>
						</if>
				   </then>
				   <else>
						<if>
							<available file="${debug}"/>
							<then>
								 <copy file="${debug}" tofile="${app.dir}/bin/fpapp-debug.apk" overwrite="true"/>
							</then>
							<else>
								<echo> build.gradle might have added Product build flavours, plain debug Android apk not found to copy.</echo>
							</else>
						</if>
				   </else>
				</if>
	       </then>
       </if>
    </target>

    <target name="precompile">
     	<if>
     		<not>
     			<equals arg1="${isUniversalApp}" arg2="true" />
			</not>
     	  <then>
        <!--Any application related setup can be done using this task prior to actual compilation
	(Ex: Copying a modified Main Activity file,adding additional project.properties)-->
        <if>
        	<available file="${resfolder}/../androidprecompiletask.xml" />
             <then>
              <if>
                <equals arg1="${isWatchBuild.Local}" arg2="true"/>
                <then>
                    <ant antfile="androidprecompiletask.xml" dir="${resfolder}/../" >
        			   <property name="isMobileBuild" value="false"/>
                           <property name="isWatchBuild" value="true"/>
        		   </ant>
                </then>
                <else>
                    <ant antfile="androidprecompiletask.xml" dir="${resfolder}/../" >
        			   <property name="isMobileBuild" value="true"/>
                       <property name="isWatchBuild" value="false"/>
                    </ant>
                </else>
              </if>
            </then>
        	<else>
        		<echo>No precompile task present</echo>
        	</else>
        </if>
       </then>
      </if>
    </target>

    <target name="postcompile">
     	<if>
     		<not>
     			<equals arg1="${isUniversalApp}" arg2="true" />
     		</not>
     	<then>
        <!--Any post compilations tasks can be done using this task(Ex: signing the application)-->
        <if>
        	<available file="${resfolder}/../androidpostcompiletask.xml" />
             <then>
              <if>
                <equals arg1="${isWatchBuild.Local}" arg2="true"/>
                <then>
                    <ant antfile="androidpostcompiletask.xml" dir="${resfolder}/../" >
        			   <property name="isMobileBuild" value="false"/>
                       <property name="isWatchBuild" value="true"/>
        		   </ant>
                </then>
                <else>
                    <ant antfile="androidpostcompiletask.xml" dir="${resfolder}/../" >
        			   <property name="isMobileBuild" value="true"/>
                       <property name="isWatchBuild" value="false"/>
                    </ant>
                </else>
              </if>
            </then>
        	<else>
        		<echo>No postcompile task present</echo>
        	</else>
        </if>
       </then>
      </if>
    </target>

     <target name="cleanupgradle">
		<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_MAPS" value=""/>
		<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_LOCATION" value=""/>
		<replace file="${app.dir}/build.gradle" token="$COMPILE_TENSORFLOW_IMAGE_CLASSIFIER" value=""/>

    </target>

	 <target name="CheckForLicenses">
	  <property name="download_not_required" value="true"/>
	   <ant antfile="${extres}/gradle_dependencies.xml"  target="CreateLicenseIfNotExist"/>
	 </target>

	 <target name="calculateChecksum">
		<if>
			<equals arg1="${isFPbuild}" arg2="false"/>
			<then>
			   <ant antfile="build-jssource.xml"  target="encrypt-assets-hash-file" inheritAll="true">
					<property name="app.dir" value="${app.dir}"/>
					<property name="assets.dir" value="${assets.dir}"/>
					<property name="jssrc.dir" value="${jssrc.dir}"/>
					<property name="packagepath" value="${packagepath}"/>
					<property name="secureappsource" value="true"/>
					<property name="appname" value="${appname}"/>
					<property name="basedir" value="${basedir}"/>
				</ant>
			</then>
		</if>
	 </target>

	 <target name="copy_aars">
		<mkdir dir="${dist.dir}/${appid}_aars"/>
			<copy file="${appAarFilePath}" todir="${dist.dir}/${appid}_aars"/>
			<copy todir="${dist.dir}/${appid}_aars">
				<fileset dir="${dist.dir}/${appid}/libs">
					<include name="*.aar"/>
				</fileset>
			</copy>
			<if>
			     <equals arg1="${enableCordova}" arg2="true" />
				<then>
				     <copy todir="${dist.dir}/${appid}_aars">
						<fileset dir="${dist.dir}/${appid}/CordovaAssetsLib/build/outputs/aar">
							<include name="*.aar"/>
						</fileset>
					</copy>
					<copy todir="${dist.dir}/${appid}_aars">
						<fileset dir="${dist.dir}/${appid}/CordovaAssetsLib/CordovaLib/build/outputs/aar">
							<include name="*.aar"/>
						</fileset>
					</copy>
				</then>
			</if>
			<echo>Generated library artifacts can be found at following location : ${line.separator}${dist.dir}${file.separator}${appid}_aars</echo>
	</target>

<target name="checkAndIncludeReactNative">
   <echo>enableReactNative :: ${enableReactNative}</echo>
   <if>
      <and>
         <equals arg1="${enableReactNative}" arg2="true" />
         <not>
            <equals arg1="${reactNativeAppsList}" arg2="$${reactNativeAppsList}" />
         </not>
      </and>
      <then>
      	<copy file="${extres}/react-native-0.57.0.jar" tofile="${app.dir}/libs/react-native-0.57.0.jar" overwrite="true"/>
		<replace file="${app.dir}/build.gradle" token="$COMPILE_REACTNATIVE" value="compileOnly files('libs/react-native-0.57.0.jar')"/>
		<replace file="${app.dir}/build.gradle" token="$EXCLUDE_REACTNATIVE_JAR" value="'react-native-0.57.0.jar',"/>
		<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$IMPLEMENTS_REACTNATIVE_INTERFACE" value="implements com.facebook.react.modules.core.PermissionAwareActivity" />
		<loadfile property="reactnative-interface-methods" srcFile="${extres}/reactnative-interface-methods.txt"/>
		<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$REACTNATIVE_INTERFACE_METHODS" value="${reactnative-interface-methods}" />

        <echo>reactNativeApps list: ${reactNativeAppsList}</echo>
         <for list="${reactNativeAppsList}"  param="reactnativeapp" >
            <sequential>
               <echo>reactNativeApp: @{reactnativeapp}</echo>
                <java fork="true" failonerror="yes" jvm="${installer.javahome}/bin/java" jar="${extres}/JSONKeyExtractor.jar" outputproperty="react-native">
                	<arg line="${project.loc}/ReactNativeProjects/@{reactnativeapp}/package.json"/>
                	<arg line="dependencies.react-native"/>
        		</java>
               <echo>  reactNative version - ${react-native} </echo>
               <if>
                  <available file="${project.loc}/ReactNativeProjects/@{reactnativeapp}" type="dir" />
                  <then>
                    <echo>inside available reactNativeApp: @{reactnativeapp}</echo>
                     <copy todir="${app.dir}/@{reactnativeapp}" overwrite="true">
                        <fileset dir="${project.loc}/ReactNativeProjects/@{reactnativeapp}" />
                     </copy>
                     <!-- The logic here is  we will convert existing standalone react native app to a library . Standalone react native app consists of project level build.gradle and settings.gradle files under (<reactAppName>/android folder) as well as app module build.gradle file (under <reactAppName>/android/app folder) .
                     Note : root build.gradle file consists of repositories that resolves gradle dependencies mentioned in app module build.gradle file.
                     root settings.gradle file consists of library modules (as well as current app module)that need to be include in the build

                     When we convert react-native app module to library from application and reference that library project from Volt MX app ,the root project reference of react native app(<reactNativeapp>/android ) is changed to Volt MX app's(${app.dir})root folder (after that the existing root project gradle files will become dummy) .To resolve the gradle dependencies of react native app-module build.gradle file we need to copy the existing react native's
                     root build.gradle file repositories  and settings.gradle files entries under <reactNativeApp>/android folder entries to Volt MX app's build.gradle file and settings.gradle file .
                    Through script as we can't copy only repostiories section of existing root build.gradle file so developers need to add the same to the Volt MX app's build.gradle file. Through script we add only the below default repository .
                    maven {
                      // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
                       url "$rootDir/../node_modules/react-native/android"
                        }

                     -->
                     <!--  ********** settings.gradle file changes *********** -->
                     <!-- add each reactNativeApp in root(i.e${app.dir}) setting.gradle to include in the build-->
                     <concat append="true" destfile="${app.dir}/settings.gradle" fixlastline="yes">${line.separator}
                                   include ':@{reactnativeapp}:android:app'${line.separator}</concat>

                     <!-- copy build modules/libraries of reactNativeApp settings.gradle (by commenting code which casues compilation errors)into Volt MX app's root settings.gradle file -->
                     <replace file="${app.dir}/@{reactnativeapp}/android/settings.gradle" token="rootProject.name" value="//rootProject.name" />
                     <replaceregexp file="${app.dir}/@{reactnativeapp}/android/settings.gradle" match="${line.separator}include(\s+)':app'" replace="//include ':app'" />
                     <concat destfile="${app.dir}/settings.gradle" append="true">
                        <fileset file="${app.dir}/@{reactnativeapp}/android/settings.gradle" />
                     </concat>

                     <!--  ********** build.gradle file changes ***********-->
                     <!-- adding reactNativeApp as a library module dependency project in root build.gradle file  -->
                     <concat append="true" destfile="${app.dir}/build.gradle" fixlastline="yes">${line.separator}
                                 dependencies
                                   {
                                  implementation project(':@{reactnativeapp}:android:app')
                                   }${line.separator}</concat>
                     <!-- As existing React native's root build.gradle(under <reactNativeApp>/android) becomes dummy when reactNativeApp is made as library,recent react native version defines varaibels in root build.gradle file and referenced in app module build.gradle ,so we need to copy the variables to the app module build.gradle and rename the scope of accessing variables to current project instead of root project.
                     When a module is added as a library ,below sequence of events will happen.
                     i)Gradle compiles/builds library module independently using its module build.gradle file to generate aar
                     ,in this step gradle system looks in library module build.gradle for repositories to resolve gradle dependencies mentioned in its build.gradle file.So we need to copy the repositories from existing reactNativeApp's root build.gradle file to its app module build.gradle .
                     ii)After that root project build.gradles is compiled, if its finds library projects(mentioned as a gradle dependencies)then in this case library module gradle dependencies are resolved from root project build gradle ,so developers need to copy the build repositories from root build.gradle file of react native app into Volt MX app root build.gradle file 
                    -->
                     <copy file="${app.dir}/@{reactnativeapp}/android/build.gradle" tofile="${app.dir}/@{reactnativeapp}/android/build.gradle_" />
                     <copy file="${app.dir}/@{reactnativeapp}/android/app/build.gradle" tofile="${app.dir}/@{reactnativeapp}/android/app/build_original.gradle_" />
                     <concat destfile="${app.dir}/@{reactnativeapp}/android/build.gradle" append="true">
                        <fileset file="${app.dir}/@{reactnativeapp}/android/app/build.gradle" />
                     </concat>
                     <copy file="${app.dir}/@{reactnativeapp}/android/build.gradle" tofile="${app.dir}/@{reactnativeapp}/android/app/build.gradle" overwrite="yes" />

                     <delete file="${app.dir}/@{reactnativeapp}/android/build.gradle"/>

                     <replace file="${app.dir}/@{reactnativeapp}/android/app/build.gradle" token="rootProject.ext" value="project.ext" />

                     <!-- ******************** Changing reactNativeApp application to library [START] ************************************ -->
                     <replace file="${app.dir}/@{reactnativeapp}/android/app/build.gradle" token="applicationId" value="//applicationId" />
                     <replaceregexp file="${app.dir}/@{reactnativeapp}/android/app/build.gradle" match="apply(\s+)plugin:(\s+)[&quot;,']com.android.application[&quot;,']" replace="apply plugin: &quot;com.android.library&quot;" />
                     <replace file="${app.dir}/@{reactnativeapp}/android/app/build.gradle" token="applicationVariants" value="libraryVariants" />
                     <!-- ******************** Changing reactNativeApp application to library [END] ******************************************** -->

                      <!--  How React Native app works
                     React native app's js logic is compiled to a js bundle file (index.android.bundle)at run time this file is loaded into Javascript engine and the js logic is mapped to native functionality .
                     Debug mode of Standalone ReactNative app
                      * Debug variant of react native app is built using "react-native run-android" command . In this mode , js bundle(index.android.bundle) is supplied from Development server instead of packaging with the app.
                     Release mode of Standalone ReactNative app
                     * Release mode variant is generated using "react-native run-android hyphenhyphen variant=release" command . In this mode js bundle(index.android.bundle)is generated and kept in the assets folder of the app.
                     Relase variant uses react.gradle file to generate the js bundle and to place it in assets folder of the app.
                     As Volt MX app supports embedding more than one React Native app , the flat directory structure of js bundle(i.e assets/index.android.bundle) file will not work as it leads to ovveriding the js bundles files when mutiple react native apps are added ,so to avoid this we will(codegen/developers) need to generate the js bundle (using react native command) in a hierachy structure(i.e assets/<reactNativeAppName>/index.android.bundle instead of flat structure assets/index.android.bundle ). And also in Debug mode , we will prebundle the js bundle instead of loading from Developement server as the react native API which we were using to launch react native app insists to prebundle the js file .
                     As per above Volt MX requirement , so don't need to execute react.gradle from react native app module's build.gradle file,so skipping the same.
                      -->
                     <replaceregexp file="${app.dir}/@{reactnativeapp}/android/app/build.gradle" match="apply(\s+)from:(\s+)[&quot;,']../../node_modules/react-native/react.gradle[&quot;,']" replace="// apply from: &quot;../../node_modules/react-native/react.gradle&quot;" />

                     <!-- above regexpression is not working for searching "apply from: "../../node_modules/react-native/react.gradle",so using below-->
                     <replace file="${app.dir}/@{reactnativeapp}/android/app/build.gradle" token="apply from: &quot;../../node_modules/react-native/react.gradle&quot;" value="// apply from: &quot;$../../node_modules/react-native/react.gradle&quot;" />

                     <!-- ********** exclude appcompat-v7 module  from com.facebook.react:react-native dependency as it leads to conflict due to different appcompat-v7 versions of Kony's and react-native ******** -->
                     <replaceregexp file="${app.dir}/@{reactnativeapp}/android/app/build.gradle" match="(implementation|compile)(\s+)[&quot;,']com.facebook.react:react-native:[+,0-9,.]+[&quot;,']" replace="implementation ( &quot;com.facebook.react:react-native:+&quot;)                    {                       exclude group: 'com.android.support',module: 'appcompat-v7'                                                               }              " />
                     <copy todir="${app.dir}/../node_modules" overwrite="true">
                        <fileset dir="${app.dir}/@{reactnativeapp}/node_modules" />
                     </copy>
                     <delete dir="${app.dir}/@{reactnativeapp}/node_modules"/>

                     <!--**************************** AndroidManifest.xml file changes *************************************-->
                     <replace file="${app.dir}/@{reactnativeapp}/android/app/src/main/AndroidManifest.xml" token="action.MAIN" value="action.@{reactnativeapp}" />
                     <replace file="${app.dir}/@{reactnativeapp}/android/app/src/main/AndroidManifest.xml" token="category.LAUNCHER" value="category.DEFAULT" />
                     <replaceregexp file="${app.dir}/@{reactnativeapp}/android/app/src/main/AndroidManifest.xml" match="android:icon=&quot;@[a-zA-Z0-9]+/[a-zA-Z0-9]+&quot;" replace="" />
                     <replace file="${app.dir}/@{reactnativeapp}/android/app/src/main/AndroidManifest.xml" token="android:name=&quot;.MainApplication&quot;" value="" />
                     <if>
						<bool>
							<isgreaterthan arg1="${react-native}" arg2="0.59.0"/>
						</bool>
						<then>
                     		<replace file="${app.dir}/@{reactnativeapp}/android/app/build.gradle" token='apply from: file("../../' value='apply from: file("../../../../' />
                     		<replace file="${app.dir}/../node_modules/@react-native-community/cli-platform-android/native_modules.gradle" token='def reactNativeConfigOutput = this.getCommandOutput(reactNativeConfigCommand, this.root)' value='  File mainRoot = new File(this.root.getPath()+"/@{reactnativeapp}") ${line.separator} def reactNativeConfigOutput = this.getCommandOutput(reactNativeConfigCommand, mainRoot)' />
                     	</then>
                     </if>
                  </then>
               </if>
            </sequential>
         </for>

         <!-- when compileing reactNativeApp which is added as library ,the dependencies in the app module build.gradle are resolved from the repositories mentioned in root(i,e${app.dir}) build.gradle,so adding default reactNativeapp respositories to Volt MX app's root(i.e${app.dir}) build.gradle file   -->
         <if>
			<bool>
				<isgreaterthan arg1="${react-native}" arg2="0.59.0"/>
			</bool>
			<then>
				<concat fixlastline="yes" destfile="${app.dir}/build.gradle" append="true">${line.separator}
				        allprojects {
				                      repositories {
				                                    maven {
				                                              url "$rootDir/../node_modules/react-native/android"
				                                           }
				                                           maven {
																// Android JSC is installed from npm
																url("$rootDir/../node_modules/jsc-android/dist")
															}


				                                   }

				                    }</concat>
                </then>
                <else>
                	<concat fixlastline="yes" destfile="${app.dir}/build.gradle" append="true">${line.separator}
				        allprojects {
				                      repositories {
				                                    maven {
				                                              url "$rootDir/../node_modules/react-native/android"
				                                           }				                                          

				                                   }

				                    }</concat>
                </else>
            </if>
         <!--  ********** application.properties file changes ***********-->
         <concat fixlastline="yes" destfile="${assets.dir}/application.properties" append="true">enableReactNative : ${enableReactNative}</concat>
      </then>
	  <else>
		<replace file="${app.dir}/build.gradle" token="$COMPILE_REACTNATIVE" value=""/>
		<replace file="${app.dir}/build.gradle" token="$EXCLUDE_REACTNATIVE_JAR" value=""/>
		<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$IMPLEMENTS_REACTNATIVE_INTERFACE" value="" />
		<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$REACTNATIVE_INTERFACE_METHODS" value="" />
	  </else>
   </if>
</target>

<target name="bundle-features">
   <if>
      <equals arg1="${bundleOnlySelectedFeatures}" arg2="true" />
      <then>
         <!-- copy common/default jar -->
         <copy file="${extlibs}/KonyFrameworkJars/${build.option.local}/konywidgets.jar" tofile="${app.dir}/libs/konywidgets.jar" overwrite="true" />
         <ant antfile="${currentfile}"  target="bundle-selected-features-only" />
      </then>
      <else>
         <copy todir="${app.dir}/libs" overwrite="true">
            <fileset dir="${extlibs}/KonyFrameworkJars/${build.option.local}" />
         </copy>
      </else>
   </if>
</target>

<target name="bundle-selected-features-only">
   <echo>widgets: ${widgets}</echo>
   <if>
      <not>
         <equals arg1="${widgets}" arg2="$${widgets}" />
      </not>
      <then>
         <java fork="true" failonerror="yes" jvm="${installer.javahome}/bin/java" jar="${extres}/BundleSelectedFeatures.jar">
            <arg value="${extres}/features-mapping.properties" />
            <arg value="${widgets}" />
            <arg value="${extlibs}/KonyFrameworkJars/${build.option.local}" />
            <arg value="${libs.dir}" />
         </java>
      </then>
   </if>
</target>
<!-- START:HPHX-1467 Adding STRICT mode jars to the libs based the strictMode value. -->
<!-- bundle-strict-jars antcall target will bundle konyframeworkStrict jars  -->
<target name="bundle-strict-jars">
	<!-- copy common/default jar -->
	<copy todir="${app.dir}/libs" overwrite="true">
		<fileset dir="${extlibs}/KonyFrameworkStrictJars/${build.option.local}" />
	</copy>
</target>
<!-- END: HPHX-1467 Adding STRICT mode jars to the libs based the strictMode value. -->

<target name="makeLauncherChanges">
   <!--  ****** launcher activity changes -->
   <echo>useHeadlessLauncherActivity:${useHeadlessLauncherActivity}</echo>
   <echo>useCustomHeadlessLauncherActivity:${useCustomHeadlessLauncherActivity}</echo>

   <property name="mainAndLauncherIntentFilter"  value="
      ${line.separator} &lt;intent-filter&gt;               
      ${line.separator} &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;              
      ${line.separator} &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;            
      ${line.separator} &lt;/intent-filter&gt;" />

      <!-- Note useHeadlessLauncherActivity and useCustomHeadlessLauncherActivity  properties are defined in androidbuild.properties  -->
   <if>
      <and>
      <equals arg1="${useHeadlessLauncherActivity}" arg2="true" />
      <not>
         <equals arg1="${useCustomHeadlessLauncherActivity}" arg2="true" />
      </not>
      </and>
      <then>
         <replace file="${app.dir}/AndroidManifest.xml" token="$MAIN_LAUNCH_INTENTFILTER" value="" />
         <property name="launcher_activity_name_attr" value="android:name=&quot;.${appIdHeadlessLauncherActivity}&quot;" />
         <move file="${app.dir}/src/APPIDHeadlessLauncherActivity.java" tofile="${app.dir}/src/${packagepath}/${appIdHeadlessLauncherActivity}.java" overwrite="true" />
         <replace file="${app.dir}/src/${packagepath}/${appIdHeadlessLauncherActivity}.java" token="$PACKAGE" value="${package}" />
         <replace file="${app.dir}/src/${packagepath}/${appIdHeadlessLauncherActivity}.java" token="$APPID" value="${appid}" />

         <!-- Note : appShortcutsMetaData value is assigned in place where activity child tags are parsed -->
         <replace file="${app.dir}/AndroidManifest.xml" token="$FACELESS_LAUNCHER_ACTIVITY_TAGS" value="&lt;activity ${launcher_activity_name_attr} ${activity_theme_attr}&gt;
            ${line.separator} ${mainAndLauncherIntentFilter}
            ${line.separator} ${appShortcutsMetaData} 
            ${line.separator} &lt;/activity &gt;" />
   </then>
   <else>
      <delete file="${app.dir}/src/APPIDHeadlessLauncherActivity.java" />
      <replace file="${app.dir}/AndroidManifest.xml" token="$FACELESS_LAUNCHER_ACTIVITY_TAGS" value="" />
      <if>
         <equals arg1="${useCustomHeadlessLauncherActivity}" arg2="true" />
         <then>
            <replace file="${app.dir}/AndroidManifest.xml" token="$MAIN_LAUNCH_INTENTFILTER" value="" />
         </then>
         <else>
            <replace file="${app.dir}/AndroidManifest.xml" token="$MAIN_LAUNCH_INTENTFILTER" value="${mainAndLauncherIntentFilter}" />
         </else>
        </if>
   </else>
   </if>
</target>

 <scriptdef language="javascript" name="getActivityNameFromAttributesUsingJavaScript">
   <attribute name="activity_attributes" />
   <attribute name="property" />
   var activity_attributes=attributes.get("activity_attributes")
			var property=attributes.get("property")
			var myRegexp = /android\:name\s*\=\s*["']([^\"\']*)["']/;
			var match = myRegexp.exec(activity_attributes);
			if(match != null){
				project.setNewProperty(property, match[1]);
			}else{
              self.log("match is null");
            }
</scriptdef>

<scriptdef language="javascript" name="checkIsClassNameRelativeUsingJavaScript">
   <attribute name="custom_main_activity_class" />
   <attribute name="property" />
   var customMainActivityClass=attributes.get("custom_main_activity_class")
	var property=attributes.get("property")

	var result = customMainActivityClass.split(".")
	if(result[0] == ""){
	  project.setNewProperty(property, true);
	}else{
	   project.setNewProperty(property, false);
	}
</scriptdef>

<target name="writeMainActivityFullNameToAppPropertiesFile">
   <echo>isRelativeClass inside writeAppID.. :${isRelativeClassName}</echo>
   <if>
      <not>
         <equals arg1="${customMainActivityName}" arg2="$${customMainActivityName}" />
      </not>
      <then>
         <if>
            <equals arg1="${isRelativeClassName}" arg2="true" />
            <then>
               <var name="mainActivityFullyQualifiedName" value="${package}${customMainActivityName}" />
            </then>
            <else>
               <var name="mainActivityFullyQualifiedName" value="${customMainActivityName}" />
            </else>
         </if>
      </then>
      <else>
         <var name="mainActivityFullyQualifiedName" value="${package}.${appid}" />
      </else>
   </if>
   <echo>mainActivityFullyQualifiedName:${mainActivityFullyQualifiedName}</echo>
   <concat fixlastline="yes" destfile="${assets.dir}/application.properties" append="true">mainActivityFullyQualifiedName : ${mainActivityFullyQualifiedName}</concat>
</target>


    <target name="all" depends="init, copyjar, copyextlibs, convertAppidInLowerCase, gen, cleanupgradle,checkAndIncludeReactNative, copyassets, precompile,CheckForLicenses,configureReleaseSignInfo, compile,postcompile">
    </target>


</project>
